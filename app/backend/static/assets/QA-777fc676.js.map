{"version":3,"file":"QA-777fc676.js","sources":["../../../frontend/src/pages/qa/QA.tsx"],"sourcesContent":["import { useEffect, useRef, useState } from \"react\";\r\nimport { Checkbox, Panel, DefaultButton, Spinner, TextField, SpinButton, IDropdownOption } from \"@fluentui/react\";\r\nimport { SparkleFilled } from \"@fluentui/react-icons\";\r\n\r\nimport styles from \"./QA.module.css\";\r\n\r\nimport { askApi, configApi, ChatAppResponse, ChatAppRequest, RetrievalMode, VectorFieldOptions, GPT4VInput } from \"../../api\";\r\nimport { Answer, AnswerError } from \"../../components/Answer\";\r\nimport { QuestionInput } from \"../../components/QuestionInput\";\r\nimport { EvaluationInput } from \"../../components/EvaluationInput\";\r\nimport { AnalysisPanel, AnalysisPanelTabs } from \"../../components/AnalysisPanel\";\r\nimport { SettingsButton } from \"../../components/SettingsButton/SettingsButton\";\r\nimport { useLogin, getToken, isLoggedIn, requireAccessControl } from \"../../authConfig\";\r\nimport { VectorSettings } from \"../../components/VectorSettings\";\r\nimport { GPT4VSettings } from \"../../components/GPT4VSettings\";\r\nimport { ExampleList } from \"../../components/Example\";\r\n\r\nimport { useMsal } from \"@azure/msal-react\";\r\nimport { TokenClaimsDisplay } from \"../../components/TokenClaimsDisplay\";\r\n\r\nexport function Component(): JSX.Element {\r\n    const [isConfigPanelOpen, setIsConfigPanelOpen] = useState(false);\r\n    const [promptTemplate, setPromptTemplate] = useState<string>(\"\");\r\n    const [promptTemplatePrefix, setPromptTemplatePrefix] = useState<string>(\"\");\r\n    const [promptTemplateSuffix, setPromptTemplateSuffix] = useState<string>(\"\");\r\n    const [retrievalMode, setRetrievalMode] = useState<RetrievalMode>(RetrievalMode.Hybrid);\r\n    const [retrieveCount, setRetrieveCount] = useState<number>(5);\r\n    const [useSemanticRanker, setUseSemanticRanker] = useState<boolean>(true);\r\n    const [useSemanticCaptions, setUseSemanticCaptions] = useState<boolean>(false);\r\n    const [useGPT4V, setUseGPT4V] = useState<boolean>(false);\r\n    const [gpt4vInput, setGPT4VInput] = useState<GPT4VInput>(GPT4VInput.TextAndImages);\r\n    const [excludeCategory, setExcludeCategory] = useState<string>(\"\");\r\n    const [question, setQuestion] = useState<string>(\"\");\r\n    const [vectorFieldList, setVectorFieldList] = useState<VectorFieldOptions[]>([VectorFieldOptions.Embedding, VectorFieldOptions.ImageEmbedding]);\r\n    const [useOidSecurityFilter, setUseOidSecurityFilter] = useState<boolean>(false);\r\n    const [useGroupsSecurityFilter, setUseGroupsSecurityFilter] = useState<boolean>(false);\r\n    const [showGPT4VOptions, setShowGPT4VOptions] = useState<boolean>(false);\r\n\r\n    const lastQuestionRef = useRef<string>(\"\");\r\n\r\n    const [isLoading, setIsLoading] = useState<boolean>(false);\r\n    const [error, setError] = useState<unknown>();\r\n    const [answer, setAnswer] = useState<ChatAppResponse>();\r\n\r\n    const [activeCitation, setActiveCitation] = useState<string>();\r\n    const [activeAnalysisPanelTab, setActiveAnalysisPanelTab] = useState<AnalysisPanelTabs | undefined>(undefined);\r\n\r\n    const client = useLogin ? useMsal().instance : undefined;\r\n\r\n    const getConfig = async () => {\r\n        const token = client ? await getToken(client) : undefined;\r\n\r\n        configApi(token).then(config => {\r\n            setShowGPT4VOptions(config.showGPT4VOptions);\r\n        });\r\n    };\r\n\r\n    useEffect(() => {\r\n        getConfig();\r\n    }, []);\r\n\r\n    const makeApiRequest = async (question: string) => {\r\n        lastQuestionRef.current = question;\r\n\r\n        error && setError(undefined);\r\n        setIsLoading(true);\r\n        setActiveCitation(undefined);\r\n        setActiveAnalysisPanelTab(undefined);\r\n\r\n        const token = client ? await getToken(client) : undefined;\r\n\r\n        try {\r\n            const request: ChatAppRequest = {\r\n                messages: [\r\n                    {\r\n                        content: question,\r\n                        role: \"user\"\r\n                    }\r\n                ],\r\n                context: {\r\n                    overrides: {\r\n                        prompt_template: promptTemplate.length === 0 ? undefined : promptTemplate,\r\n                        prompt_template_prefix: promptTemplatePrefix.length === 0 ? undefined : promptTemplatePrefix,\r\n                        prompt_template_suffix: promptTemplateSuffix.length === 0 ? undefined : promptTemplateSuffix,\r\n                        exclude_category: excludeCategory.length === 0 ? undefined : excludeCategory,\r\n                        top: retrieveCount,\r\n                        retrieval_mode: retrievalMode,\r\n                        semantic_ranker: useSemanticRanker,\r\n                        semantic_captions: useSemanticCaptions,\r\n                        use_oid_security_filter: useOidSecurityFilter,\r\n                        use_groups_security_filter: useGroupsSecurityFilter,\r\n                        vector_fields: vectorFieldList,\r\n                        use_gpt4v: useGPT4V,\r\n                        gpt4v_input: gpt4vInput\r\n                    }\r\n                },\r\n                // ChatAppProtocol: Client must pass on any session state received from the server\r\n                session_state: answer ? answer.choices[0].session_state : null\r\n            };\r\n            const result = await askApi(request, token);\r\n            setAnswer(result);\r\n        } catch (e) {\r\n            setError(e);\r\n        } finally {\r\n            setIsLoading(false);\r\n        }\r\n    };\r\n\r\n    const onPromptTemplateChange = (_ev?: React.FormEvent<HTMLInputElement | HTMLTextAreaElement>, newValue?: string) => {\r\n        setPromptTemplate(newValue || \"\");\r\n    };\r\n\r\n    const onPromptTemplatePrefixChange = (_ev?: React.FormEvent<HTMLInputElement | HTMLTextAreaElement>, newValue?: string) => {\r\n        setPromptTemplatePrefix(newValue || \"\");\r\n    };\r\n\r\n    const onPromptTemplateSuffixChange = (_ev?: React.FormEvent<HTMLInputElement | HTMLTextAreaElement>, newValue?: string) => {\r\n        setPromptTemplateSuffix(newValue || \"\");\r\n    };\r\n\r\n    const onRetrieveCountChange = (_ev?: React.SyntheticEvent<HTMLElement, Event>, newValue?: string) => {\r\n        setRetrieveCount(parseInt(newValue || \"3\"));\r\n    };\r\n\r\n    const onRetrievalModeChange = (_ev: React.FormEvent<HTMLDivElement>, option?: IDropdownOption<RetrievalMode> | undefined, index?: number | undefined) => {\r\n        setRetrievalMode(option?.data || RetrievalMode.Hybrid);\r\n    };\r\n\r\n    const onUseSemanticRankerChange = (_ev?: React.FormEvent<HTMLElement | HTMLInputElement>, checked?: boolean) => {\r\n        setUseSemanticRanker(!!checked);\r\n    };\r\n\r\n    const onUseSemanticCaptionsChange = (_ev?: React.FormEvent<HTMLElement | HTMLInputElement>, checked?: boolean) => {\r\n        setUseSemanticCaptions(!!checked);\r\n    };\r\n\r\n    const onExcludeCategoryChanged = (_ev?: React.FormEvent, newValue?: string) => {\r\n        setExcludeCategory(newValue || \"\");\r\n    };\r\n\r\n    const onExampleClicked = (example: string) => {\r\n        makeApiRequest(example);\r\n        setQuestion(example);\r\n    };\r\n\r\n    const onShowCitation = (citation: string) => {\r\n        if (activeCitation === citation && activeAnalysisPanelTab === AnalysisPanelTabs.CitationTab) {\r\n            setActiveAnalysisPanelTab(undefined);\r\n        } else {\r\n            setActiveCitation(citation);\r\n            setActiveAnalysisPanelTab(AnalysisPanelTabs.CitationTab);\r\n        }\r\n    };\r\n\r\n    const onToggleTab = (tab: AnalysisPanelTabs) => {\r\n        if (activeAnalysisPanelTab === tab) {\r\n            setActiveAnalysisPanelTab(undefined);\r\n        } else {\r\n            setActiveAnalysisPanelTab(tab);\r\n        }\r\n    };\r\n\r\n    const onUseOidSecurityFilterChange = (_ev?: React.FormEvent<HTMLElement | HTMLInputElement>, checked?: boolean) => {\r\n        setUseOidSecurityFilter(!!checked);\r\n    };\r\n\r\n    const onUseGroupsSecurityFilterChange = (_ev?: React.FormEvent<HTMLElement | HTMLInputElement>, checked?: boolean) => {\r\n        setUseGroupsSecurityFilter(!!checked);\r\n    };\r\n\r\n    return (\r\n        <div className={styles.oneshotContainer}>\r\n            <div className={styles.oneshotTopSection}>\r\n                <SettingsButton className={styles.settingsButton} onClick={() => setIsConfigPanelOpen(!isConfigPanelOpen)} />\r\n                <h2>Athena KI-Testphase: Feedback zur Qualität im Teamskanal erwünscht!</h2>\r\n                <SparkleFilled fontSize={\"120px\"} primaryFill={\"#9CBF2B\"} aria-hidden=\"true\" aria-label=\"Chatgpt logo\" />\r\n                <h1 className={styles.oneshotTitle}>Stelle eine Frage an die PCS-Wissensdatenbank und bewerte anschließend die Antwort.</h1>\r\n                <h3>Wenn du einen Produktnamen in deiner Frage verwenden willst, gib diesen in \"\" an. Zum Beispiel \"INTUS ACM40e\".</h3>\r\n                <ExampleList onExampleClicked={onExampleClicked} useGPT4V={useGPT4V} tabName={\"qa\"} />\r\n                <div className={styles.oneshotQuestionInput}>\r\n                    <QuestionInput placeholder=\"... ?\" disabled={isLoading} initQuestion={question} onSend={question => makeApiRequest(question)} />\r\n                </div>\r\n            </div>\r\n            <div className={styles.oneshotBottomSection}>\r\n                {isLoading && <Spinner label=\"Athena arbeitet ...\" />}\r\n                {!isLoading && answer && !error && (\r\n                    <div className={styles.oneshotAnswerContainer}>\r\n                        <Answer\r\n                            answer={answer}\r\n                            isStreaming={false}\r\n                            onCitationClicked={x => onShowCitation(x)}\r\n                            onThoughtProcessClicked={() => onToggleTab(AnalysisPanelTabs.ThoughtProcessTab)}\r\n                            //onSupportingContentClicked={() => onToggleTab(AnalysisPanelTabs.SupportingContentTab)}\r\n                        />\r\n                    </div>\r\n                )}\r\n                {error ? (\r\n                    <div className={styles.oneshotAnswerContainer}>\r\n                        <AnswerError error={error.toString()} onRetry={() => makeApiRequest(lastQuestionRef.current)} />\r\n                    </div>\r\n                ) : null}\r\n                {activeAnalysisPanelTab && answer && (\r\n                    <AnalysisPanel\r\n                        className={styles.oneshotAnalysisPanel}\r\n                        activeCitation={activeCitation}\r\n                        onActiveTabChanged={x => onToggleTab(x)}\r\n                        citationHeight=\"600px\"\r\n                        answer={answer}\r\n                        activeTab={activeAnalysisPanelTab}\r\n                    />\r\n                )}\r\n            </div>\r\n\r\n            <div className={styles.emailBottomSection}>\r\n                <div className={styles.emailQuestionInput}>\r\n                    {!isLoading && answer && !error && (\r\n                        <EvaluationInput disabled={isLoading} question={question} answer={answer} tabName={\"qa\"} prompt={promptTemplate} />\r\n                    )}\r\n                </div>\r\n            </div>\r\n\r\n            <Panel\r\n                headerText=\"Konfigurieren Sie die Erstellung von Antworten\"\r\n                isOpen={isConfigPanelOpen}\r\n                isBlocking={false}\r\n                onDismiss={() => setIsConfigPanelOpen(false)}\r\n                closeButtonAriaLabel=\"Close\"\r\n                onRenderFooterContent={() => <DefaultButton onClick={() => setIsConfigPanelOpen(false)}>Close</DefaultButton>}\r\n                isFooterAtBottom={true}\r\n            >\r\n                <TextField\r\n                    className={styles.oneshotSettingsSeparator}\r\n                    defaultValue={promptTemplate}\r\n                    label=\"Prompt Vorlage überschreiben\"\r\n                    multiline\r\n                    autoAdjustHeight\r\n                    onChange={onPromptTemplateChange}\r\n                />\r\n                {useLogin && (\r\n                    <Checkbox\r\n                        className={styles.oneshotSettingsSeparator}\r\n                        checked={useOidSecurityFilter || requireAccessControl}\r\n                        label=\"Use oid security filter\"\r\n                        disabled={!isLoggedIn(client) || requireAccessControl}\r\n                        onChange={onUseOidSecurityFilterChange}\r\n                    />\r\n                )}\r\n                {useLogin && (\r\n                    <Checkbox\r\n                        className={styles.oneshotSettingsSeparator}\r\n                        checked={useGroupsSecurityFilter || requireAccessControl}\r\n                        label=\"Use groups security filter\"\r\n                        disabled={!isLoggedIn(client) || requireAccessControl}\r\n                        onChange={onUseGroupsSecurityFilterChange}\r\n                    />\r\n                )}\r\n                {useLogin && <TokenClaimsDisplay />}\r\n            </Panel>\r\n        </div>\r\n    );\r\n}\r\n\r\nComponent.displayName = \"QA\";\r\n"],"names":["Component","isConfigPanelOpen","setIsConfigPanelOpen","useState","promptTemplate","setPromptTemplate","promptTemplatePrefix","setPromptTemplatePrefix","promptTemplateSuffix","setPromptTemplateSuffix","retrievalMode","setRetrievalMode","RetrievalMode","retrieveCount","setRetrieveCount","useSemanticRanker","setUseSemanticRanker","useSemanticCaptions","setUseSemanticCaptions","useGPT4V","setUseGPT4V","gpt4vInput","setGPT4VInput","GPT4VInput","excludeCategory","setExcludeCategory","question","setQuestion","vectorFieldList","setVectorFieldList","VectorFieldOptions","useOidSecurityFilter","setUseOidSecurityFilter","useGroupsSecurityFilter","setUseGroupsSecurityFilter","showGPT4VOptions","setShowGPT4VOptions","lastQuestionRef","useRef","isLoading","setIsLoading","error","setError","answer","setAnswer","activeCitation","setActiveCitation","activeAnalysisPanelTab","setActiveAnalysisPanelTab","client","useLogin","useMsal","getConfig","token","getToken","configApi","config","useEffect","makeApiRequest","request","result","askApi","e","onPromptTemplateChange","_ev","newValue","onExampleClicked","example","onShowCitation","citation","AnalysisPanelTabs","onToggleTab","tab","onUseOidSecurityFilterChange","checked","onUseGroupsSecurityFilterChange","jsxs","styles","jsx","SettingsButton","SparkleFilled","ExampleList","QuestionInput","Spinner","Answer","x","AnswerError","AnalysisPanel","EvaluationInput","Panel","DefaultButton","TextField","Checkbox","requireAccessControl","isLoggedIn","TokenClaimsDisplay"],"mappings":"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"}