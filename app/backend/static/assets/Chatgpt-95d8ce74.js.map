{"version":3,"file":"Chatgpt-95d8ce74.js","sources":["../../../frontend/src/components/GPT4VSettings/GPT4VSettings.tsx","../../../frontend/src/components/EvaluationInputChatGPT/EvaluationInputChatGPT.tsx","../../../frontend/src/pages/chatgpt/Chatgpt.tsx"],"sourcesContent":["import { useEffect, useState } from \"react\";\r\nimport { Stack, Checkbox, IDropdownOption, Dropdown } from \"@fluentui/react\";\r\n\r\nimport styles from \"./GPT4VSettings.module.css\";\r\nimport { GPT4VInput } from \"../../api\";\r\n\r\ninterface Props {\r\n    gpt4vInputs: GPT4VInput;\r\n    isUseGPT4V: boolean;\r\n    updateGPT4VInputs: (input: GPT4VInput) => void;\r\n    updateUseGPT4V: (useGPT4V: boolean) => void;\r\n}\r\n\r\nexport const GPT4VSettings = ({ updateGPT4VInputs, updateUseGPT4V, isUseGPT4V, gpt4vInputs }: Props) => {\r\n    const [useGPT4V, setUseGPT4V] = useState<boolean>(isUseGPT4V);\r\n    const [vectorFieldOption, setVectorFieldOption] = useState<GPT4VInput>(gpt4vInputs || GPT4VInput.TextAndImages);\r\n\r\n    const onuseGPT4V = (_ev?: React.FormEvent<HTMLElement | HTMLInputElement>, checked?: boolean) => {\r\n        updateUseGPT4V(!!checked);\r\n        setUseGPT4V(!!checked);\r\n    };\r\n\r\n    const onSetGPT4VInput = (_ev: React.FormEvent<HTMLDivElement>, option?: IDropdownOption<GPT4VInput> | undefined) => {\r\n        if (option) {\r\n            const data = option.key as GPT4VInput;\r\n            updateGPT4VInputs(data || GPT4VInput.TextAndImages);\r\n            data && setVectorFieldOption(data);\r\n        }\r\n    };\r\n\r\n    useEffect(() => {\r\n        useGPT4V && updateGPT4VInputs(GPT4VInput.TextAndImages);\r\n    }, [useGPT4V]);\r\n\r\n    return (\r\n        <Stack className={styles.container} tokens={{ childrenGap: 10 }}>\r\n            <Checkbox checked={useGPT4V} label=\"Use GPT-4 Turbo with Vision\" onChange={onuseGPT4V} />\r\n            {useGPT4V && (\r\n                <Dropdown\r\n                    selectedKey={vectorFieldOption}\r\n                    className={styles.oneshotSettingsSeparator}\r\n                    label=\"GPT-4 Turbo with Vision Inputs\"\r\n                    options={[\r\n                        {\r\n                            key: GPT4VInput.TextAndImages,\r\n                            text: \"Images and text from index\"\r\n                        },\r\n                        { text: \"Images only\", key: GPT4VInput.Images },\r\n                        { text: \"Text only\", key: GPT4VInput.Texts }\r\n                    ]}\r\n                    required\r\n                    onChange={onSetGPT4VInput}\r\n                />\r\n            )}\r\n        </Stack>\r\n    );\r\n};\r\n","import { useEffect, useState } from \"react\";\r\nimport { useMsal } from \"@azure/msal-react\";\r\nimport { Stack, TextField, IconButton } from \"@fluentui/react\";\r\nimport { Dropdown, DropdownMenuItemType, IDropdownOption, IDropdownStyles } from \"@fluentui/react/lib/Dropdown\";\r\n\r\nimport { AnimalTurtle16Filled, Send28Filled } from \"@fluentui/react-icons\";\r\nimport { useLogin, getToken, isLoggedIn, requireAccessControl } from \"../../authConfig\";\r\nimport { ChatAppResponse, appendToBlobApi } from \"../../api\";\r\n\r\nimport styles from \"./EvaluationInput.module.css\";\r\nimport { to } from \"@react-spring/web\";\r\n\r\ninterface Props {\r\n    disabled: boolean;\r\n    tabName: string;\r\n}\r\n\r\nconst client = useLogin ? useMsal().instance : undefined;\r\n\r\nconst dropdownStyles: Partial<IDropdownStyles> = { dropdown: { width: 300 } };\r\n\r\nconst dropdownCorrectnessOptions = [\r\n    { key: \"ja\", text: \"Ja\" },\r\n    { key: \"teils\", text: \"Teils\" },\r\n    { key: \"nein\", text: \"Nein\" },\r\n    { key: \"nicht beurteilbar\", text: \"Nicht beurteilbar\" }\r\n];\r\n\r\nconst dropdownBenefitsOptions = [\r\n    { key: \"Zeitersparnis\", text: \"Zeitersparnis\" },\r\n    { key: \"Inspiration / Input\", text: \"Inspiration / Input\" },\r\n    { key: \"Sonstiges, siehe unten:\", text: \"Sonstiges, siehe unten:\" }\r\n];\r\n\r\nexport const EvaluationInputChatGPT = ({ disabled, tabName }: Props) => {\r\n    const [showInfo, setShowInfo] = useState(false);\r\n\r\n    const { instance } = useMsal();\r\n    const disableRequiredAccessControl = requireAccessControl && !isLoggedIn(instance);\r\n\r\n    const [user, setUser] = useState<string>(\"\");\r\n    const [selectedBenefits, setSelectedBenefits] = useState<IDropdownOption[]>([]);\r\n\r\n    const onUserChange = (_ev: React.FormEvent<HTMLInputElement | HTMLTextAreaElement>, newValue?: string) => {\r\n        if (!newValue) {\r\n            setUser(\"\");\r\n        } else if (newValue.length <= 1000) {\r\n            setUser(newValue);\r\n        }\r\n    };\r\n\r\n    const [correct_answer, setCorrectAnswer] = useState<string>(\"\");\r\n\r\n    const onCorrectAnswerChange = (_ev: React.FormEvent<HTMLInputElement | HTMLTextAreaElement>, newValue?: string) => {\r\n        if (!newValue) {\r\n            setCorrectAnswer(\"\");\r\n        } else if (newValue.length <= 1000) {\r\n            setCorrectAnswer(newValue);\r\n        }\r\n    };\r\n\r\n    const [benefitMinuten, setBenefitMinuten] = useState<string>(\"\");\r\n\r\n    const onBenefitMinutenChange = (_ev: React.FormEvent<HTMLInputElement | HTMLTextAreaElement>, newValue?: string) => {\r\n        if (!newValue) {\r\n            setBenefitMinuten(\"\");\r\n        } else if (newValue.length <= 5000) {\r\n            setBenefitMinuten(newValue);\r\n        }\r\n    };\r\n\r\n    const [sonstiges, setSonstiges] = useState<string>(\"\");\r\n\r\n    const onSonstigesChange = (_ev: React.FormEvent<HTMLInputElement | HTMLTextAreaElement>, newValue?: string) => {\r\n        if (!newValue) {\r\n            setSonstiges(\"\");\r\n        } else if (newValue.length <= 1000) {\r\n            setSonstiges(newValue);\r\n        }\r\n    };\r\n\r\n    const onChangeSelectedBenefit = (\r\n        event: React.FormEvent<HTMLDivElement> | undefined,\r\n        item: IDropdownOption<any> | undefined,\r\n        index: number | undefined\r\n    ): void => {\r\n        if (!item) {\r\n            // Handle the case when item is undefined\r\n            console.log(\"Keine Auswahl!\");\r\n            return;\r\n        }\r\n        const updatedSelection = [...selectedBenefits];\r\n\r\n        if (item.selected) {\r\n            // Add the selected item to the array\r\n            updatedSelection.push(item);\r\n        } else {\r\n            // Remove the unselected item from the array\r\n            const indexToRemove = updatedSelection.findIndex(option => option.key === item.key);\r\n            if (indexToRemove !== -1) {\r\n                updatedSelection.splice(indexToRemove, 1);\r\n            }\r\n        }\r\n\r\n        setSelectedBenefits(updatedSelection);\r\n    };\r\n\r\n    const makeApiRequest = async () => {\r\n        const token = client ? await getToken(client) : undefined;\r\n        /*\r\n        const contextList = answer.choices[0].context.thoughts[1].description;\r\n        const context: string[] = [];\r\n        if (contextList.length > 0) {\r\n            for (const dict of contextList) {\r\n                if (\"sourcepage\" in dict) {\r\n                    context.push(dict[\"sourcepage\"]);\r\n                }\r\n            }\r\n        }\r\n        */\r\n        const currentDatetime: Date = new Date();\r\n        const benefitsListe = selectedBenefits.map(item => item.text);\r\n        const newline = {\r\n            TabName: tabName,\r\n            //Frage: answer.choices[0].context.thoughts[0].description,\r\n            //AntwortChatGPT: answer.choices[0].message.content,\r\n            //Kontext: context,\r\n            Korrektheit: selectedCorrectness?.text,\r\n            korrekte_Antwort: correct_answer,\r\n            Benefit: benefitsListe,\r\n            BenefitMinuten: benefitMinuten,\r\n            Sonstiges: sonstiges,\r\n            Benutzer: user,\r\n            Zeitstempel: currentDatetime,\r\n            model: \"gpt-4\"\r\n        };\r\n        const dataToAppend = JSON.stringify(newline) + \"\\n\";\r\n\r\n        try {\r\n            const result = await appendToBlobApi(dataToAppend, token);\r\n        } catch (e) {\r\n            console.log(e);\r\n        } finally {\r\n            setShowInfo(true);\r\n            setUser(\"\");\r\n            setSonstiges(\"\");\r\n            setCorrectAnswer(\"\");\r\n            setSelectedBenefits([]);\r\n            setSelectedCorrectness(undefined);\r\n            const closeTimeoutId = setTimeout(() => {\r\n                setShowInfo(false);\r\n            }, 6000);\r\n        }\r\n    };\r\n\r\n    const [selectedCorrectness, setSelectedCorrectness] = useState<IDropdownOption>();\r\n\r\n    return (\r\n        <div>\r\n            {showInfo && (\r\n                <div\r\n                    style={{\r\n                        position: \"fixed\",\r\n                        top: \"10px\",\r\n                        right: \"10px\",\r\n                        background: \"#9CBF2B\",\r\n                        padding: \"10px\",\r\n                        borderRadius: \"5px\",\r\n                        boxShadow: \"0 0 10px rgba(0, 0, 0, 0.2)\"\r\n                    }}\r\n                >\r\n                    <p>Gespeichert!</p>\r\n                </div>\r\n            )}\r\n            {\r\n                <Stack className={styles.evaluationContainer}>\r\n                    <Stack horizontal className={styles.evaluationInputContainer}>\r\n                        <Dropdown\r\n                            label=\"Ist die Antwort inhaltlich korrekt?\"\r\n                            selectedKey={selectedCorrectness ? selectedCorrectness.key : undefined}\r\n                            onChange={(e, opt, index) => {\r\n                                setSelectedCorrectness(opt);\r\n                            }}\r\n                            placeholder=\"WÃ¤hle eine Option\"\r\n                            options={dropdownCorrectnessOptions}\r\n                            styles={dropdownStyles}\r\n                        />\r\n                    </Stack>\r\n                    {(selectedCorrectness?.text === \"Nein\" || selectedCorrectness?.text === \"Teils\" || selectedCorrectness?.text === \"Nicht beurteilbar\") && (\r\n                        <div>\r\n                            <Stack horizontal className={styles.evaluationInputTextContainer}>\r\n                                <TextField\r\n                                    className={styles.evaluationInputTextContainer}\r\n                                    resizable={false}\r\n                                    placeholder={\"Was hat nicht gepasst?\"}\r\n                                    value={correct_answer}\r\n                                    onChange={onCorrectAnswerChange}\r\n                                />\r\n                            </Stack>\r\n                        </div>\r\n                    )}\r\n                    <Stack horizontal className={styles.evaluationInputContainer}>\r\n                        <Dropdown\r\n                            label=\"Was hat dir die Antwort gebracht?\"\r\n                            selectedKeys={selectedBenefits?.map(option => option.key.toString())}\r\n                            onChange={onChangeSelectedBenefit}\r\n                            placeholder=\"WÃ¤hle eine Option\"\r\n                            options={dropdownBenefitsOptions}\r\n                            styles={dropdownStyles}\r\n                            multiSelect\r\n                        />\r\n                    </Stack>\r\n                    <Stack horizontal className={styles.evaluationInputTextContainer}>\r\n                        <TextField\r\n                            className={styles.evaluationInputTextContainer}\r\n                            resizable={false}\r\n                            placeholder={\"Wieviel Zeitersparnis (in Minuten) hat dir Athena gebracht?\"}\r\n                            value={benefitMinuten}\r\n                            onChange={onBenefitMinutenChange}\r\n                        />\r\n                    </Stack>\r\n                    <Stack horizontal className={styles.evaluationInputTextContainer}>\r\n                        <TextField\r\n                            className={styles.evaluationInputTextContainer}\r\n                            resizable={false}\r\n                            placeholder={\"Sonstiges: \"}\r\n                            value={sonstiges}\r\n                            onChange={onSonstigesChange}\r\n                        />\r\n                    </Stack>\r\n                    <Stack horizontal className={styles.evaluationInputTextContainer}>\r\n                        <TextField\r\n                            className={styles.evaluationInputTextContainer}\r\n                            resizable={false}\r\n                            placeholder={\"Bitte gib deinen Namen an: \"}\r\n                            value={user}\r\n                            onChange={onUserChange}\r\n                        />\r\n                    </Stack>\r\n                    <Stack horizontal className={styles.evaluationInputButtonsContainer}>\r\n                        <IconButton\r\n                            style={{ color: \"black\", marginLeft: \"10px\" }}\r\n                            iconProps={{ iconName: \"Save\" }}\r\n                            title=\"Speichern\"\r\n                            ariaLabel=\"Speichern\"\r\n                            onClick={() => makeApiRequest()}\r\n                        />\r\n                    </Stack>\r\n                </Stack>\r\n            }\r\n        </div>\r\n    );\r\n};\r\n","import { useRef, useState, useEffect } from \"react\";\r\nimport { Checkbox, Panel, DefaultButton, TextField, SpinButton } from \"@fluentui/react\";\r\nimport { SparkleFilled } from \"@fluentui/react-icons\";\r\nimport readNDJSONStream from \"ndjson-readablestream\";\r\n\r\nimport styles from \"./Chatgpt.module.css\";\r\n\r\nimport {\r\n    chatoriginalApi,\r\n    configApi,\r\n    RetrievalMode,\r\n    ChatAppResponse,\r\n    ChatAppResponseOrError,\r\n    ChatAppRequest,\r\n    ResponseMessage,\r\n    VectorFieldOptions,\r\n    GPT4VInput\r\n} from \"../../api\";\r\nimport { Answer, AnswerError, AnswerLoading } from \"../../components/Answer\";\r\nimport { QuestionInput } from \"../../components/QuestionInput\";\r\nimport { ExampleList } from \"../../components/Example\";\r\nimport { UserChatMessage } from \"../../components/UserChatMessage\";\r\nimport { AnalysisPanel, AnalysisPanelTabs } from \"../../components/AnalysisPanel\";\r\nimport { SettingsButton } from \"../../components/SettingsButton\";\r\nimport { ClearChatButton } from \"../../components/ClearChatButton\";\r\nimport { useLogin, getToken, isLoggedIn, requireAccessControl } from \"../../authConfig\";\r\nimport { VectorSettings } from \"../../components/VectorSettings\";\r\nimport { useMsal } from \"@azure/msal-react\";\r\nimport { TokenClaimsDisplay } from \"../../components/TokenClaimsDisplay\";\r\nimport { GPT4VSettings } from \"../../components/GPT4VSettings\";\r\nimport { EvaluationInputChatGPT } from \"../../components/EvaluationInputChatGPT\";\r\n\r\nexport function Component(): JSX.Element {\r\n    const [isConfigPanelOpen, setIsConfigPanelOpen] = useState(false);\r\n    const [promptTemplate, setPromptTemplate] = useState<string>(\"\");\r\n    const [retrieveCount, setRetrieveCount] = useState<number>(0);\r\n    const [retrievalMode, setRetrievalMode] = useState<RetrievalMode>(RetrievalMode.Hybrid);\r\n    const [useSemanticRanker, setUseSemanticRanker] = useState<boolean>(true);\r\n    const [shouldStream, setShouldStream] = useState<boolean>(true);\r\n    const [useSemanticCaptions, setUseSemanticCaptions] = useState<boolean>(false);\r\n    const [excludeCategory, setExcludeCategory] = useState<string>(\"\");\r\n    const [useSuggestFollowupQuestions, setUseSuggestFollowupQuestions] = useState<boolean>(false);\r\n    const [vectorFieldList, setVectorFieldList] = useState<VectorFieldOptions[]>([VectorFieldOptions.Embedding]);\r\n    const [useOidSecurityFilter, setUseOidSecurityFilter] = useState<boolean>(false);\r\n    const [useGroupsSecurityFilter, setUseGroupsSecurityFilter] = useState<boolean>(false);\r\n    const [gpt4vInput, setGPT4VInput] = useState<GPT4VInput>(GPT4VInput.TextAndImages);\r\n    const [useGPT4V, setUseGPT4V] = useState<boolean>(false);\r\n\r\n    const lastQuestionRef = useRef<string>(\"\");\r\n    const chatMessageStreamEnd = useRef<HTMLDivElement | null>(null);\r\n\r\n    const [isLoading, setIsLoading] = useState<boolean>(false);\r\n    const [isStreaming, setIsStreaming] = useState<boolean>(false);\r\n    const [error, setError] = useState<unknown>();\r\n\r\n    const [activeCitation, setActiveCitation] = useState<string>();\r\n    const [activeAnalysisPanelTab, setActiveAnalysisPanelTab] = useState<AnalysisPanelTabs | undefined>(undefined);\r\n\r\n    const [selectedAnswer, setSelectedAnswer] = useState<number>(0);\r\n    const [answers, setAnswers] = useState<[user: string, response: ChatAppResponse][]>([]);\r\n    const [streamedAnswers, setStreamedAnswers] = useState<[user: string, response: ChatAppResponse][]>([]);\r\n    const [showGPT4VOptions, setShowGPT4VOptions] = useState<boolean>(false);\r\n\r\n    const getConfig = async () => {\r\n        const token = client ? await getToken(client) : undefined;\r\n\r\n        configApi(token).then(config => {\r\n            setShowGPT4VOptions(config.showGPT4VOptions);\r\n        });\r\n    };\r\n\r\n    const handleAsyncRequest = async (question: string, answers: [string, ChatAppResponse][], setAnswers: Function, responseBody: ReadableStream<any>) => {\r\n        let answer: string = \"\";\r\n        let askResponse: ChatAppResponse = {} as ChatAppResponse;\r\n\r\n        const updateState = (newContent: string) => {\r\n            return new Promise(resolve => {\r\n                setTimeout(() => {\r\n                    answer += newContent;\r\n                    const latestResponse: ChatAppResponse = {\r\n                        ...askResponse,\r\n                        choices: [{ ...askResponse.choices[0], message: { content: answer, role: askResponse.choices[0].message.role } }]\r\n                    };\r\n                    setStreamedAnswers([...answers, [question, latestResponse]]);\r\n                    resolve(null);\r\n                }, 33);\r\n            });\r\n        };\r\n        try {\r\n            setIsStreaming(true);\r\n            for await (const event of readNDJSONStream(responseBody)) {\r\n                if (event[\"choices\"] && event[\"choices\"][0][\"context\"] && event[\"choices\"][0][\"context\"][\"data_points\"]) {\r\n                    event[\"choices\"][0][\"message\"] = event[\"choices\"][0][\"delta\"];\r\n                    askResponse = event;\r\n                } else if (event[\"choices\"] && event[\"choices\"][0][\"delta\"][\"content\"]) {\r\n                    setIsLoading(false);\r\n                    await updateState(event[\"choices\"][0][\"delta\"][\"content\"]);\r\n                } else if (event[\"choices\"] && event[\"choices\"][0][\"context\"]) {\r\n                    // Update context with new keys from latest event\r\n                    askResponse.choices[0].context = { ...askResponse.choices[0].context, ...event[\"choices\"][0][\"context\"] };\r\n                } else if (event[\"error\"]) {\r\n                    throw Error(event[\"error\"]);\r\n                }\r\n            }\r\n        } finally {\r\n            setIsStreaming(false);\r\n        }\r\n        const fullResponse: ChatAppResponse = {\r\n            ...askResponse,\r\n            choices: [{ ...askResponse.choices[0], message: { content: answer, role: askResponse.choices[0].message.role } }]\r\n        };\r\n        return fullResponse;\r\n    };\r\n\r\n    const client = useLogin ? useMsal().instance : undefined;\r\n\r\n    const makeApiRequest = async (question: string) => {\r\n        lastQuestionRef.current = question;\r\n\r\n        error && setError(undefined);\r\n        setIsLoading(true);\r\n        setActiveCitation(undefined);\r\n        setActiveAnalysisPanelTab(undefined);\r\n\r\n        const token = client ? await getToken(client) : undefined;\r\n\r\n        try {\r\n            const messages: ResponseMessage[] = answers.flatMap(a => [\r\n                { content: a[0], role: \"user\" },\r\n                { content: a[1].choices[0].message.content, role: \"assistant\" }\r\n            ]);\r\n\r\n            const request: ChatAppRequest = {\r\n                messages: [...messages, { content: question, role: \"user\" }],\r\n                stream: shouldStream,\r\n                context: {\r\n                    overrides: {\r\n                        prompt_template: promptTemplate.length === 0 ? undefined : promptTemplate,\r\n                        exclude_category: excludeCategory.length === 0 ? undefined : excludeCategory,\r\n                        top: retrieveCount,\r\n                        retrieval_mode: retrievalMode,\r\n                        semantic_ranker: useSemanticRanker,\r\n                        semantic_captions: useSemanticCaptions,\r\n                        suggest_followup_questions: useSuggestFollowupQuestions,\r\n                        use_oid_security_filter: useOidSecurityFilter,\r\n                        use_groups_security_filter: useGroupsSecurityFilter,\r\n                        vector_fields: vectorFieldList,\r\n                        use_gpt4v: useGPT4V,\r\n                        gpt4v_input: gpt4vInput\r\n                    }\r\n                },\r\n                // ChatAppProtocol: Client must pass on any session state received from the server\r\n                session_state: answers.length ? answers[answers.length - 1][1].choices[0].session_state : null\r\n            };\r\n\r\n            const response = await chatoriginalApi(request, token);\r\n            if (!response.body) {\r\n                throw Error(\"No response body\");\r\n            }\r\n            if (shouldStream) {\r\n                const parsedResponse: ChatAppResponse = await handleAsyncRequest(question, answers, setAnswers, response.body);\r\n                setAnswers([...answers, [question, parsedResponse]]);\r\n            } else {\r\n                const parsedResponse: ChatAppResponseOrError = await response.json();\r\n                if (response.status > 299 || !response.ok) {\r\n                    throw Error(parsedResponse.error || \"Unknown error\");\r\n                }\r\n                setAnswers([...answers, [question, parsedResponse as ChatAppResponse]]);\r\n            }\r\n        } catch (e) {\r\n            setError(e);\r\n        } finally {\r\n            setIsLoading(false);\r\n        }\r\n    };\r\n\r\n    const clearChat = () => {\r\n        lastQuestionRef.current = \"\";\r\n        error && setError(undefined);\r\n        setActiveCitation(undefined);\r\n        setActiveAnalysisPanelTab(undefined);\r\n        setAnswers([]);\r\n        setStreamedAnswers([]);\r\n        setIsLoading(false);\r\n        setIsStreaming(false);\r\n    };\r\n\r\n    useEffect(() => chatMessageStreamEnd.current?.scrollIntoView({ behavior: \"smooth\" }), [isLoading]);\r\n    useEffect(() => chatMessageStreamEnd.current?.scrollIntoView({ behavior: \"auto\" }), [streamedAnswers]);\r\n    useEffect(() => {\r\n        getConfig();\r\n    }, []);\r\n\r\n    const onPromptTemplateChange = (_ev?: React.FormEvent<HTMLInputElement | HTMLTextAreaElement>, newValue?: string) => {\r\n        setPromptTemplate(newValue || \"\");\r\n    };\r\n\r\n    const onRetrieveCountChange = (_ev?: React.SyntheticEvent<HTMLElement, Event>, newValue?: string) => {\r\n        setRetrieveCount(parseInt(newValue || \"3\"));\r\n    };\r\n\r\n    const onUseSemanticRankerChange = (_ev?: React.FormEvent<HTMLElement | HTMLInputElement>, checked?: boolean) => {\r\n        setUseSemanticRanker(!!checked);\r\n    };\r\n\r\n    const onUseSemanticCaptionsChange = (_ev?: React.FormEvent<HTMLElement | HTMLInputElement>, checked?: boolean) => {\r\n        setUseSemanticCaptions(!!checked);\r\n    };\r\n\r\n    const onShouldStreamChange = (_ev?: React.FormEvent<HTMLElement | HTMLInputElement>, checked?: boolean) => {\r\n        setShouldStream(!!checked);\r\n    };\r\n\r\n    const onExcludeCategoryChanged = (_ev?: React.FormEvent, newValue?: string) => {\r\n        setExcludeCategory(newValue || \"\");\r\n    };\r\n\r\n    const onUseSuggestFollowupQuestionsChange = (_ev?: React.FormEvent<HTMLElement | HTMLInputElement>, checked?: boolean) => {\r\n        setUseSuggestFollowupQuestions(!!checked);\r\n    };\r\n\r\n    const onUseOidSecurityFilterChange = (_ev?: React.FormEvent<HTMLElement | HTMLInputElement>, checked?: boolean) => {\r\n        setUseOidSecurityFilter(!!checked);\r\n    };\r\n\r\n    const onUseGroupsSecurityFilterChange = (_ev?: React.FormEvent<HTMLElement | HTMLInputElement>, checked?: boolean) => {\r\n        setUseGroupsSecurityFilter(!!checked);\r\n    };\r\n\r\n    const onExampleClicked = (example: string) => {\r\n        makeApiRequest(example);\r\n    };\r\n\r\n    const onShowCitation = (citation: string, index: number) => {\r\n        if (activeCitation === citation && activeAnalysisPanelTab === AnalysisPanelTabs.CitationTab && selectedAnswer === index) {\r\n            setActiveAnalysisPanelTab(undefined);\r\n        } else {\r\n            setActiveCitation(citation);\r\n            setActiveAnalysisPanelTab(AnalysisPanelTabs.CitationTab);\r\n        }\r\n\r\n        setSelectedAnswer(index);\r\n    };\r\n\r\n    const onToggleTab = (tab: AnalysisPanelTabs, index: number) => {\r\n        if (activeAnalysisPanelTab === tab && selectedAnswer === index) {\r\n            setActiveAnalysisPanelTab(undefined);\r\n        } else {\r\n            setActiveAnalysisPanelTab(tab);\r\n        }\r\n\r\n        setSelectedAnswer(index);\r\n    };\r\n\r\n    return (\r\n        <div className={styles.container}>\r\n            <div className={styles.commandsContainer}>\r\n                <ClearChatButton className={styles.commandButton} onClick={clearChat} disabled={!lastQuestionRef.current || isLoading} />\r\n                <SettingsButton className={styles.commandButton} onClick={() => setIsConfigPanelOpen(!isConfigPanelOpen)} />\r\n            </div>\r\n            <div className={styles.chatRoot}>\r\n                <div className={styles.chatContainer}>\r\n                    {!lastQuestionRef.current ? (\r\n                        <div className={styles.chatEmptyState}>\r\n                            <h2>Athena KI-Testphase: Feedback zur QualitÃ¤t im Teamskanal erwÃ¼nscht!</h2>\r\n                            <SparkleFilled fontSize={\"120px\"} primaryFill={\"#9CBF2B\"} aria-hidden=\"true\" aria-label=\"Chatgpt logo\" />\r\n                            <h1 className={styles.chatEmptyStateTitle}>Chatte mit ChatGPT, ohne Verwendung der PCS Wissensdatenbank</h1>\r\n                            <h2 className={styles.chatEmptyStateSubtitle}>Hier zwei Beispiele:</h2>\r\n                            <ExampleList onExampleClicked={onExampleClicked} useGPT4V={useGPT4V} tabName={\"chatgptoriginal\"} />\r\n                        </div>\r\n                    ) : (\r\n                        <div className={styles.chatMessageStream}>\r\n                            {isStreaming &&\r\n                                streamedAnswers.map((streamedAnswer, index) => (\r\n                                    <div key={index}>\r\n                                        <UserChatMessage message={streamedAnswer[0]} />\r\n                                        <div className={styles.chatMessageGpt}>\r\n                                            <Answer\r\n                                                isStreaming={true}\r\n                                                key={index}\r\n                                                answer={streamedAnswer[1]}\r\n                                                isSelected={false}\r\n                                                onCitationClicked={c => onShowCitation(c, index)}\r\n                                                onThoughtProcessClicked={() => onToggleTab(AnalysisPanelTabs.ThoughtProcessTab, index)}\r\n                                                // onSupportingContentClicked={() => onToggleTab(AnalysisPanelTabs.SupportingContentTab, index)}\r\n                                                onFollowupQuestionClicked={q => makeApiRequest(q)}\r\n                                                showFollowupQuestions={useSuggestFollowupQuestions && answers.length - 1 === index}\r\n                                            />\r\n                                        </div>\r\n                                    </div>\r\n                                ))}\r\n                            {!isStreaming &&\r\n                                answers.map((answer, index) => (\r\n                                    <div key={index}>\r\n                                        <UserChatMessage message={answer[0]} />\r\n                                        <div className={styles.chatMessageGpt}>\r\n                                            <Answer\r\n                                                isStreaming={false}\r\n                                                key={index}\r\n                                                answer={answer[1]}\r\n                                                isSelected={selectedAnswer === index && activeAnalysisPanelTab !== undefined}\r\n                                                onCitationClicked={c => onShowCitation(c, index)}\r\n                                                onThoughtProcessClicked={() => onToggleTab(AnalysisPanelTabs.ThoughtProcessTab, index)}\r\n                                                // onSupportingContentClicked={() => onToggleTab(AnalysisPanelTabs.SupportingContentTab, index)}\r\n                                                onFollowupQuestionClicked={q => makeApiRequest(q)}\r\n                                                showFollowupQuestions={useSuggestFollowupQuestions && answers.length - 1 === index}\r\n                                            />\r\n                                        </div>\r\n                                    </div>\r\n                                ))}\r\n                            {isLoading && (\r\n                                <>\r\n                                    <UserChatMessage message={lastQuestionRef.current} />\r\n                                    <div className={styles.chatMessageGptMinWidth}>\r\n                                        <AnswerLoading />\r\n                                    </div>\r\n                                </>\r\n                            )}\r\n                            {error ? (\r\n                                <>\r\n                                    <UserChatMessage message={lastQuestionRef.current} />\r\n                                    <div className={styles.chatMessageGptMinWidth}>\r\n                                        <AnswerError error={error.toString()} onRetry={() => makeApiRequest(lastQuestionRef.current)} />\r\n                                    </div>\r\n                                </>\r\n                            ) : null}\r\n                            <div ref={chatMessageStreamEnd} />\r\n                        </div>\r\n                    )}\r\n\r\n                    <div className={styles.chatInput}>\r\n                        <QuestionInput\r\n                            clearOnSend\r\n                            placeholder=\"Gib eine neue Frage ein...\"\r\n                            disabled={isLoading}\r\n                            onSend={question => makeApiRequest(question)}\r\n                        />\r\n                    </div>\r\n                </div>\r\n\r\n                {answers.length > 0 && activeAnalysisPanelTab && (\r\n                    <AnalysisPanel\r\n                        className={styles.chatAnalysisPanel}\r\n                        activeCitation={activeCitation}\r\n                        onActiveTabChanged={x => onToggleTab(x, selectedAnswer)}\r\n                        citationHeight=\"810px\"\r\n                        answer={answers[selectedAnswer][1]}\r\n                        activeTab={activeAnalysisPanelTab}\r\n                    />\r\n                )}\r\n\r\n                <Panel\r\n                    headerText=\"Konfigurieren Sie die Erstellung von Antworten\"\r\n                    isOpen={isConfigPanelOpen}\r\n                    isBlocking={false}\r\n                    onDismiss={() => setIsConfigPanelOpen(false)}\r\n                    closeButtonAriaLabel=\"SchlieÃen\"\r\n                    onRenderFooterContent={() => <DefaultButton onClick={() => setIsConfigPanelOpen(false)}>Close</DefaultButton>}\r\n                    isFooterAtBottom={true}\r\n                >\r\n                    <TextField\r\n                        className={styles.chatSettingsSeparator}\r\n                        defaultValue={promptTemplate}\r\n                        label=\"Prompt Vorlage Ã¼berschreiben\"\r\n                        multiline\r\n                        autoAdjustHeight\r\n                        onChange={onPromptTemplateChange}\r\n                    />\r\n\r\n                    {showGPT4VOptions && (\r\n                        <GPT4VSettings\r\n                            gpt4vInputs={gpt4vInput}\r\n                            isUseGPT4V={useGPT4V}\r\n                            updateUseGPT4V={useGPT4V => {\r\n                                setUseGPT4V(useGPT4V);\r\n                            }}\r\n                            updateGPT4VInputs={inputs => setGPT4VInput(inputs)}\r\n                        />\r\n                    )}\r\n\r\n                    {useLogin && (\r\n                        <Checkbox\r\n                            className={styles.chatSettingsSeparator}\r\n                            checked={useOidSecurityFilter || requireAccessControl}\r\n                            label=\"Oid-Sicherheitsfilter verwenden\"\r\n                            disabled={!isLoggedIn(client) || requireAccessControl}\r\n                            onChange={onUseOidSecurityFilterChange}\r\n                        />\r\n                    )}\r\n                    {useLogin && (\r\n                        <Checkbox\r\n                            className={styles.chatSettingsSeparator}\r\n                            checked={useGroupsSecurityFilter || requireAccessControl}\r\n                            label=\"Gruppen Sicherheitsfilter verwendenr\"\r\n                            disabled={!isLoggedIn(client) || requireAccessControl}\r\n                            onChange={onUseGroupsSecurityFilterChange}\r\n                        />\r\n                    )}\r\n\r\n                    {useLogin && <TokenClaimsDisplay />}\r\n                </Panel>\r\n            </div>\r\n            {lastQuestionRef.current ? (\r\n                <div className={styles.emailBottomSection}>\r\n                    <div className={styles.emailQuestionInput}>\r\n                        {!isLoading && !error && <EvaluationInputChatGPT disabled={isLoading} tabName={\"chatGPT\"} />}\r\n                    </div>\r\n                </div>\r\n            ) : (\r\n                <div></div>\r\n            )}\r\n        </div>\r\n    );\r\n}\r\n\r\nComponent.displayName = \"Chatgpt\";\r\n"],"names":["GPT4VSettings","updateGPT4VInputs","updateUseGPT4V","isUseGPT4V","gpt4vInputs","useGPT4V","setUseGPT4V","useState","vectorFieldOption","setVectorFieldOption","GPT4VInput","onuseGPT4V","_ev","checked","onSetGPT4VInput","option","data","useEffect","jsxs","Stack","styles","jsx","Checkbox","Dropdown","client","useLogin","useMsal","dropdownStyles","dropdownCorrectnessOptions","dropdownBenefitsOptions","EvaluationInputChatGPT","disabled","tabName","showInfo","setShowInfo","instance","requireAccessControl","isLoggedIn","user","setUser","selectedBenefits","setSelectedBenefits","onUserChange","newValue","correct_answer","setCorrectAnswer","onCorrectAnswerChange","benefitMinuten","setBenefitMinuten","onBenefitMinutenChange","sonstiges","setSonstiges","onSonstigesChange","onChangeSelectedBenefit","event","item","index","updatedSelection","indexToRemove","makeApiRequest","token","getToken","currentDatetime","benefitsListe","newline","selectedCorrectness","dataToAppend","result","appendToBlobApi","e","setSelectedCorrectness","opt","TextField","IconButton","Component","isConfigPanelOpen","setIsConfigPanelOpen","promptTemplate","setPromptTemplate","retrieveCount","setRetrieveCount","retrievalMode","setRetrievalMode","RetrievalMode","useSemanticRanker","setUseSemanticRanker","shouldStream","setShouldStream","useSemanticCaptions","setUseSemanticCaptions","excludeCategory","setExcludeCategory","useSuggestFollowupQuestions","setUseSuggestFollowupQuestions","vectorFieldList","setVectorFieldList","VectorFieldOptions","useOidSecurityFilter","setUseOidSecurityFilter","useGroupsSecurityFilter","setUseGroupsSecurityFilter","gpt4vInput","setGPT4VInput","lastQuestionRef","useRef","chatMessageStreamEnd","isLoading","setIsLoading","isStreaming","setIsStreaming","error","setError","activeCitation","setActiveCitation","activeAnalysisPanelTab","setActiveAnalysisPanelTab","selectedAnswer","setSelectedAnswer","answers","setAnswers","streamedAnswers","setStreamedAnswers","showGPT4VOptions","setShowGPT4VOptions","getConfig","configApi","config","handleAsyncRequest","question","responseBody","answer","askResponse","updateState","newContent","resolve","latestResponse","readNDJSONStream","request","a","response","chatoriginalApi","parsedResponse","clearChat","onPromptTemplateChange","onUseOidSecurityFilterChange","onUseGroupsSecurityFilterChange","onExampleClicked","example","onShowCitation","citation","AnalysisPanelTabs","onToggleTab","tab","ClearChatButton","SettingsButton","streamedAnswer","UserChatMessage","Answer","c","q","Fragment","AnswerLoading","AnswerError","SparkleFilled","ExampleList","QuestionInput","AnalysisPanel","x","Panel","DefaultButton","inputs","TokenClaimsDisplay"],"mappings":"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"}