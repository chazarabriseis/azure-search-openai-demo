{"version":3,"file":"Marketing-a988edce.js","sources":["../../../frontend/src/components/EvaluationInputMarketing/EvaluationInputMarketing.tsx","../../../frontend/src/pages/marketing/Marketing.tsx"],"sourcesContent":["import { useEffect, useState } from \"react\";\r\nimport { useMsal } from \"@azure/msal-react\";\r\nimport { Stack, TextField, IconButton } from \"@fluentui/react\";\r\nimport { Dropdown, DropdownMenuItemType, IDropdownOption, IDropdownStyles } from \"@fluentui/react/lib/Dropdown\";\r\n\r\nimport { AnimalTurtle16Filled, Send28Filled } from \"@fluentui/react-icons\";\r\nimport { useLogin, getToken, isLoggedIn, requireAccessControl } from \"../../authConfig\";\r\nimport { ChatAppResponse, appendToBlobApi } from \"../../api\";\r\n\r\nimport styles from \"./EvaluationInput.module.css\";\r\nimport { to } from \"@react-spring/web\";\r\n\r\ninterface Props {\r\n    disabled: boolean;\r\n    question: string;\r\n    answer: ChatAppResponse;\r\n    tabName: string;\r\n}\r\n\r\nconst client = useLogin ? useMsal().instance : undefined;\r\n\r\nconst dropdownStyles: Partial<IDropdownStyles> = { dropdown: { width: 300 } };\r\n\r\nconst dropdownCorrectnessOptions = [\r\n    { key: \"ja\", text: \"Ja\" },\r\n    { key: \"teils\", text: \"Teils\" },\r\n    { key: \"nein\", text: \"Nein\" },\r\n    { key: \"nicht beurteilbar\", text: \"Nicht beurteilbar\" }\r\n];\r\n\r\nconst dropdownBenefitsOptions = [\r\n    { key: \"Zeitersparnis\", text: \"Zeitersparnis\" },\r\n    { key: \"Inspiration / Input\", text: \"Inspiration / Input\" },\r\n    { key: \"Sonstiges, siehe unten:\", text: \"Sonstiges, siehe unten:\" }\r\n];\r\n\r\nexport const EvaluationInputMarketing = ({ disabled, question, answer, tabName }: Props) => {\r\n    const [showInfo, setShowInfo] = useState(false);\r\n\r\n    const { instance } = useMsal();\r\n    const disableRequiredAccessControl = requireAccessControl && !isLoggedIn(instance);\r\n\r\n    const [user, setUser] = useState<string>(\"\");\r\n    const [selectedBenefits, setSelectedBenefits] = useState<IDropdownOption[]>([]);\r\n\r\n    const onUserChange = (_ev: React.FormEvent<HTMLInputElement | HTMLTextAreaElement>, newValue?: string) => {\r\n        if (!newValue) {\r\n            setUser(\"\");\r\n        } else if (newValue.length <= 1000) {\r\n            setUser(newValue);\r\n        }\r\n    };\r\n\r\n    const [correct_answer, setCorrectAnswer] = useState<string>(\"\");\r\n\r\n    const onCorrectAnswerChange = (_ev: React.FormEvent<HTMLInputElement | HTMLTextAreaElement>, newValue?: string) => {\r\n        if (!newValue) {\r\n            setCorrectAnswer(\"\");\r\n        } else if (newValue.length <= 1000) {\r\n            setCorrectAnswer(newValue);\r\n        }\r\n    };\r\n\r\n    const [benefitMinuten, setBenefitMinuten] = useState<string>(\"\");\r\n\r\n    const onBenefitMinutenChange = (_ev: React.FormEvent<HTMLInputElement | HTMLTextAreaElement>, newValue?: string) => {\r\n        if (!newValue) {\r\n            setBenefitMinuten(\"\");\r\n        } else if (newValue.length <= 5000) {\r\n            setBenefitMinuten(newValue);\r\n        }\r\n    };\r\n\r\n    const [sonstiges, setSonstiges] = useState<string>(\"\");\r\n\r\n    const onSonstigesChange = (_ev: React.FormEvent<HTMLInputElement | HTMLTextAreaElement>, newValue?: string) => {\r\n        if (!newValue) {\r\n            setSonstiges(\"\");\r\n        } else if (newValue.length <= 1000) {\r\n            setSonstiges(newValue);\r\n        }\r\n    };\r\n\r\n    const onChangeSelectedBenefit = (\r\n        event: React.FormEvent<HTMLDivElement> | undefined,\r\n        item: IDropdownOption<any> | undefined,\r\n        index: number | undefined\r\n    ): void => {\r\n        if (!item) {\r\n            // Handle the case when item is undefined\r\n            console.log(\"Keine Auswahl!\");\r\n            return;\r\n        }\r\n        const updatedSelection = [...selectedBenefits];\r\n\r\n        if (item.selected) {\r\n            // Add the selected item to the array\r\n            updatedSelection.push(item);\r\n        } else {\r\n            // Remove the unselected item from the array\r\n            const indexToRemove = updatedSelection.findIndex(option => option.key === item.key);\r\n            if (indexToRemove !== -1) {\r\n                updatedSelection.splice(indexToRemove, 1);\r\n            }\r\n        }\r\n\r\n        setSelectedBenefits(updatedSelection);\r\n    };\r\n\r\n    const makeApiRequest = async () => {\r\n        const token = client ? await getToken(client) : undefined;\r\n        const contextList = answer.choices[0].context.thoughts[1].description;\r\n        const context: string[] = [];\r\n        if (contextList.length > 0) {\r\n            for (const dict of contextList) {\r\n                if (\"sourcepage\" in dict) {\r\n                    context.push(dict[\"sourcepage\"]);\r\n                }\r\n            }\r\n        }\r\n        const currentDatetime: Date = new Date();\r\n        const benefitsListe = selectedBenefits.map(item => item.text);\r\n        const newline = {\r\n            TabName: tabName,\r\n            Frage: answer.choices[0].context.thoughts[0].description,\r\n            AntwortChatGPT: answer.choices[0].message.content,\r\n            Kontext: context,\r\n            Korrektheit: selectedCorrectness?.text,\r\n            korrekte_Antwort: correct_answer,\r\n            Benefit: benefitsListe,\r\n            BenefitMinuten: benefitMinuten,\r\n            Sonstiges: sonstiges,\r\n            Benutzer: user,\r\n            Zeitstempel: currentDatetime,\r\n            model: \"gpt-4\"\r\n        };\r\n        const dataToAppend = JSON.stringify(newline) + \"\\n\";\r\n\r\n        try {\r\n            const result = await appendToBlobApi(dataToAppend, token);\r\n        } catch (e) {\r\n            console.log(e);\r\n        } finally {\r\n            setShowInfo(true);\r\n            setUser(\"\");\r\n            setSonstiges(\"\");\r\n            setCorrectAnswer(\"\");\r\n            setSelectedBenefits([]);\r\n            setSelectedCorrectness(undefined);\r\n            const closeTimeoutId = setTimeout(() => {\r\n                setShowInfo(false);\r\n            }, 6000);\r\n        }\r\n    };\r\n\r\n    const [selectedCorrectness, setSelectedCorrectness] = useState<IDropdownOption>();\r\n\r\n    return (\r\n        <div>\r\n            {showInfo && (\r\n                <div\r\n                    style={{\r\n                        position: \"fixed\",\r\n                        top: \"10px\",\r\n                        right: \"10px\",\r\n                        background: \"#9CBF2B\",\r\n                        padding: \"10px\",\r\n                        borderRadius: \"5px\",\r\n                        boxShadow: \"0 0 10px rgba(0, 0, 0, 0.2)\"\r\n                    }}\r\n                >\r\n                    <p>Gespeichert!</p>\r\n                </div>\r\n            )}\r\n            {\r\n                <Stack className={styles.evaluationContainer}>\r\n                    <Stack horizontal className={styles.evaluationInputContainer}>\r\n                        <Dropdown\r\n                            label=\"Ist die Antwort inhaltlich korrekt?\"\r\n                            selectedKey={selectedCorrectness ? selectedCorrectness.key : undefined}\r\n                            onChange={(e, opt, index) => {\r\n                                setSelectedCorrectness(opt);\r\n                            }}\r\n                            placeholder=\"Wähle eine Option\"\r\n                            options={dropdownCorrectnessOptions}\r\n                            styles={dropdownStyles}\r\n                        />\r\n                    </Stack>\r\n                    {(selectedCorrectness?.text === \"Nein\" || selectedCorrectness?.text === \"Teils\" || selectedCorrectness?.text === \"Nicht beurteilbar\") && (\r\n                        <div>\r\n                            <Stack horizontal className={styles.evaluationInputTextContainer}>\r\n                                <TextField\r\n                                    className={styles.evaluationInputTextContainer}\r\n                                    resizable={false}\r\n                                    placeholder={\"Was hat nicht gepasst?\"}\r\n                                    value={correct_answer}\r\n                                    onChange={onCorrectAnswerChange}\r\n                                />\r\n                            </Stack>\r\n                        </div>\r\n                    )}\r\n                    <Stack horizontal className={styles.evaluationInputContainer}>\r\n                        <Dropdown\r\n                            label=\"Was hat dir die Antwort gebracht?\"\r\n                            selectedKeys={selectedBenefits?.map(option => option.key.toString())}\r\n                            onChange={onChangeSelectedBenefit}\r\n                            placeholder=\"Wähle eine Option\"\r\n                            options={dropdownBenefitsOptions}\r\n                            styles={dropdownStyles}\r\n                            multiSelect\r\n                        />\r\n                    </Stack>\r\n                    <Stack horizontal className={styles.evaluationInputTextContainer}>\r\n                        <TextField\r\n                            className={styles.evaluationInputTextContainer}\r\n                            resizable={false}\r\n                            placeholder={\"Wieviel Zeitersparnis (in Minuten) hat dir Athena gebracht?\"}\r\n                            value={benefitMinuten}\r\n                            onChange={onBenefitMinutenChange}\r\n                        />\r\n                    </Stack>\r\n                    <Stack horizontal className={styles.evaluationInputTextContainer}>\r\n                        <TextField\r\n                            className={styles.evaluationInputTextContainer}\r\n                            resizable={false}\r\n                            placeholder={\"Sonstiges: \"}\r\n                            value={sonstiges}\r\n                            onChange={onSonstigesChange}\r\n                        />\r\n                    </Stack>\r\n                    <Stack horizontal className={styles.evaluationInputTextContainer}>\r\n                        <TextField\r\n                            className={styles.evaluationInputTextContainer}\r\n                            resizable={false}\r\n                            placeholder={\"Bitte gib deinen Namen an: \"}\r\n                            value={user}\r\n                            onChange={onUserChange}\r\n                        />\r\n                    </Stack>\r\n                    <Stack horizontal className={styles.evaluationInputButtonsContainer}>\r\n                        <IconButton\r\n                            style={{ color: \"black\", marginLeft: \"10px\" }}\r\n                            iconProps={{ iconName: \"Save\" }}\r\n                            title=\"Speichern\"\r\n                            ariaLabel=\"Speichern\"\r\n                            onClick={() => makeApiRequest()}\r\n                        />\r\n                    </Stack>\r\n                </Stack>\r\n            }\r\n        </div>\r\n    );\r\n};\r\n","import { useEffect, useRef, useState } from \"react\";\r\nimport { Checkbox, Panel, DefaultButton, Spinner, TextField, SpinButton, IDropdownOption, Dropdown } from \"@fluentui/react\";\r\nimport { SparkleFilled } from \"@fluentui/react-icons\";\r\n\r\nimport styles from \"./QA.module.css\";\r\n\r\nimport { marketingApi, configApi, ChatAppResponse, ChatAppRequest, RetrievalMode, VectorFieldOptions, GPT4VInput } from \"../../api\";\r\nimport { Answer, AnswerError } from \"../../components/Answer\";\r\nimport { QuestionInput } from \"../../components/QuestionInput\";\r\nimport { EvaluationInputMarketing } from \"../../components/EvaluationInputMarketing\";\r\nimport { AnalysisPanel, AnalysisPanelTabs } from \"../../components/AnalysisPanel\";\r\nimport { SettingsButton } from \"../../components/SettingsButton/SettingsButton\";\r\nimport { useLogin, getToken, isLoggedIn, requireAccessControl } from \"../../authConfig\";\r\nimport { VectorSettings } from \"../../components/VectorSettings\";\r\nimport { GPT4VSettings } from \"../../components/GPT4VSettings\";\r\nimport { ExampleList } from \"../../components/Example\";\r\n\r\nimport { useMsal } from \"@azure/msal-react\";\r\nimport { TokenClaimsDisplay } from \"../../components/TokenClaimsDisplay\";\r\n\r\nexport function Component(): JSX.Element {\r\n    const [isConfigPanelOpen, setIsConfigPanelOpen] = useState(false);\r\n    const [promptTemplate, setPromptTemplate] = useState<string>(\"\");\r\n    const [promptTemplatePrefix, setPromptTemplatePrefix] = useState<string>(\"\");\r\n    const [promptTemplateSuffix, setPromptTemplateSuffix] = useState<string>(\"\");\r\n    const [retrievalMode, setRetrievalMode] = useState<RetrievalMode>(RetrievalMode.Hybrid);\r\n    const [retrieveCount, setRetrieveCount] = useState<number>(4);\r\n    const [useSemanticRanker, setUseSemanticRanker] = useState<boolean>(true);\r\n    const [useSemanticCaptions, setUseSemanticCaptions] = useState<boolean>(false);\r\n    const [useGPT4V, setUseGPT4V] = useState<boolean>(false);\r\n    const [gpt4vInput, setGPT4VInput] = useState<GPT4VInput>(GPT4VInput.TextAndImages);\r\n    const [excludeCategory, setExcludeCategory] = useState<string>(\"\");\r\n    const [question, setQuestion] = useState<string>(\"\");\r\n    const [vectorFieldList, setVectorFieldList] = useState<VectorFieldOptions[]>([VectorFieldOptions.Embedding, VectorFieldOptions.ImageEmbedding]);\r\n    const [useOidSecurityFilter, setUseOidSecurityFilter] = useState<boolean>(false);\r\n    const [useGroupsSecurityFilter, setUseGroupsSecurityFilter] = useState<boolean>(false);\r\n    const [showGPT4VOptions, setShowGPT4VOptions] = useState<boolean>(false);\r\n\r\n    const lastQuestionRef = useRef<string>(\"\");\r\n\r\n    const [isLoading, setIsLoading] = useState<boolean>(false);\r\n    const [error, setError] = useState<unknown>();\r\n    const [answer, setAnswer] = useState<ChatAppResponse>();\r\n\r\n    const [activeCitation, setActiveCitation] = useState<string>();\r\n    const [activeAnalysisPanelTab, setActiveAnalysisPanelTab] = useState<AnalysisPanelTabs | undefined>(undefined);\r\n\r\n    const client = useLogin ? useMsal().instance : undefined;\r\n\r\n    const getConfig = async () => {\r\n        const token = client ? await getToken(client) : undefined;\r\n\r\n        configApi(token).then(config => {\r\n            setShowGPT4VOptions(config.showGPT4VOptions);\r\n        });\r\n    };\r\n\r\n    useEffect(() => {\r\n        getConfig();\r\n    }, []);\r\n\r\n    const makeApiRequest = async (question: string) => {\r\n        lastQuestionRef.current = question;\r\n\r\n        error && setError(undefined);\r\n        setIsLoading(true);\r\n        setActiveCitation(undefined);\r\n        setActiveAnalysisPanelTab(undefined);\r\n\r\n        const token = client ? await getToken(client) : undefined;\r\n\r\n        try {\r\n            const request: ChatAppRequest = {\r\n                messages: [\r\n                    {\r\n                        content: question,\r\n                        role: \"user\"\r\n                    }\r\n                ],\r\n                context: {\r\n                    overrides: {\r\n                        prompt_template: promptTemplate.length === 0 ? undefined : promptTemplate,\r\n                        prompt_template_prefix: promptTemplatePrefix.length === 0 ? undefined : promptTemplatePrefix,\r\n                        prompt_template_suffix: promptTemplateSuffix.length === 0 ? undefined : promptTemplateSuffix,\r\n                        exclude_category: excludeCategory.length === 0 ? undefined : excludeCategory,\r\n                        top: retrieveCount,\r\n                        retrieval_mode: retrievalMode,\r\n                        semantic_ranker: useSemanticRanker,\r\n                        semantic_captions: useSemanticCaptions,\r\n                        use_oid_security_filter: useOidSecurityFilter,\r\n                        use_groups_security_filter: useGroupsSecurityFilter,\r\n                        vector_fields: vectorFieldList,\r\n                        use_gpt4v: useGPT4V,\r\n                        gpt4v_input: gpt4vInput\r\n                    }\r\n                },\r\n                // ChatAppProtocol: Client must pass on any session state received from the server\r\n                session_state: answer ? answer.choices[0].session_state : null\r\n            };\r\n            const result = await marketingApi(request, token);\r\n            setAnswer(result);\r\n        } catch (e) {\r\n            setError(e);\r\n        } finally {\r\n            setIsLoading(false);\r\n        }\r\n    };\r\n\r\n    const onPromptTemplateChange = (_ev?: React.FormEvent<HTMLInputElement | HTMLTextAreaElement>, newValue?: string) => {\r\n        setPromptTemplate(newValue || \"\");\r\n    };\r\n\r\n    const onPromptTemplatePrefixChange = (_ev?: React.FormEvent<HTMLInputElement | HTMLTextAreaElement>, newValue?: string) => {\r\n        setPromptTemplatePrefix(newValue || \"\");\r\n    };\r\n\r\n    const onPromptTemplateSuffixChange = (_ev?: React.FormEvent<HTMLInputElement | HTMLTextAreaElement>, newValue?: string) => {\r\n        setPromptTemplateSuffix(newValue || \"\");\r\n    };\r\n\r\n    const onRetrieveCountChange = (_ev?: React.SyntheticEvent<HTMLElement, Event>, newValue?: string) => {\r\n        setRetrieveCount(parseInt(newValue || \"3\"));\r\n    };\r\n\r\n    const onRetrievalModeChange = (_ev: React.FormEvent<HTMLDivElement>, option?: IDropdownOption<RetrievalMode> | undefined, index?: number | undefined) => {\r\n        setRetrievalMode(option?.data || RetrievalMode.Hybrid);\r\n    };\r\n\r\n    const onUseSemanticRankerChange = (_ev?: React.FormEvent<HTMLElement | HTMLInputElement>, checked?: boolean) => {\r\n        setUseSemanticRanker(!!checked);\r\n    };\r\n\r\n    const onUseSemanticCaptionsChange = (_ev?: React.FormEvent<HTMLElement | HTMLInputElement>, checked?: boolean) => {\r\n        setUseSemanticCaptions(!!checked);\r\n    };\r\n\r\n    const onExcludeCategoryChanged = (_ev?: React.FormEvent, newValue?: string) => {\r\n        setExcludeCategory(newValue || \"\");\r\n    };\r\n\r\n    const onExampleClicked = (example: string) => {\r\n        makeApiRequest(example);\r\n        setQuestion(example);\r\n    };\r\n\r\n    const onShowCitation = (citation: string) => {\r\n        if (activeCitation === citation && activeAnalysisPanelTab === AnalysisPanelTabs.CitationTab) {\r\n            setActiveAnalysisPanelTab(undefined);\r\n        } else {\r\n            setActiveCitation(citation);\r\n            setActiveAnalysisPanelTab(AnalysisPanelTabs.CitationTab);\r\n        }\r\n    };\r\n\r\n    const onToggleTab = (tab: AnalysisPanelTabs) => {\r\n        if (activeAnalysisPanelTab === tab) {\r\n            setActiveAnalysisPanelTab(undefined);\r\n        } else {\r\n            setActiveAnalysisPanelTab(tab);\r\n        }\r\n    };\r\n\r\n    const onUseOidSecurityFilterChange = (_ev?: React.FormEvent<HTMLElement | HTMLInputElement>, checked?: boolean) => {\r\n        setUseOidSecurityFilter(!!checked);\r\n    };\r\n\r\n    const onUseGroupsSecurityFilterChange = (_ev?: React.FormEvent<HTMLElement | HTMLInputElement>, checked?: boolean) => {\r\n        setUseGroupsSecurityFilter(!!checked);\r\n    };\r\n\r\n    return (\r\n        <div className={styles.oneshotContainer}>\r\n            <div className={styles.oneshotTopSection}>\r\n                <SettingsButton className={styles.settingsButton} onClick={() => setIsConfigPanelOpen(!isConfigPanelOpen)} />\r\n                <h2>Athena KI-Testphase: Feedback zur Qualität im Formular unter der Antwort & im Teamskanal erwünscht!</h2>\r\n                <SparkleFilled fontSize={\"120px\"} primaryFill={\"#9CBF2B\"} aria-hidden=\"true\" aria-label=\"Chatgpt logo\" />\r\n                <h1 className={styles.oneshotTitle}>Lass dir Texte mit der PCS Wissensdatenbank erstellen. Hier zwei Beispiele:</h1>\r\n                <ExampleList onExampleClicked={onExampleClicked} useGPT4V={useGPT4V} tabName={\"marketing\"} />\r\n                <div className={styles.oneshotQuestionInput}>\r\n                    <QuestionInput placeholder=\"... ?\" disabled={isLoading} initQuestion={question} onSend={question => makeApiRequest(question)} />\r\n                </div>\r\n            </div>\r\n            <div className={styles.oneshotBottomSection}>\r\n                {isLoading && <Spinner label=\"Athena arbeitet ...\" />}\r\n                {!isLoading && answer && !error && (\r\n                    <div className={styles.oneshotAnswerContainer}>\r\n                        <Answer\r\n                            answer={answer}\r\n                            isStreaming={false}\r\n                            onCitationClicked={x => onShowCitation(x)}\r\n                            onThoughtProcessClicked={() => onToggleTab(AnalysisPanelTabs.ThoughtProcessTab)}\r\n                            //onSupportingContentClicked={() => onToggleTab(AnalysisPanelTabs.SupportingContentTab)}\r\n                        />\r\n                    </div>\r\n                )}\r\n                {error ? (\r\n                    <div className={styles.oneshotAnswerContainer}>\r\n                        <AnswerError error={error.toString()} onRetry={() => makeApiRequest(lastQuestionRef.current)} />\r\n                    </div>\r\n                ) : null}\r\n                {activeAnalysisPanelTab && answer && (\r\n                    <AnalysisPanel\r\n                        className={styles.oneshotAnalysisPanel}\r\n                        activeCitation={activeCitation}\r\n                        onActiveTabChanged={x => onToggleTab(x)}\r\n                        citationHeight=\"600px\"\r\n                        answer={answer}\r\n                        activeTab={activeAnalysisPanelTab}\r\n                    />\r\n                )}\r\n            </div>\r\n            <div className={styles.oneshotBottomSection}>\r\n                <div className={styles.oneshotQuestionInput}>\r\n                    {!isLoading && answer && !error && (\r\n                        <EvaluationInputMarketing disabled={isLoading} question={question} answer={answer} tabName={\"marketing\"} />\r\n                    )}\r\n                </div>\r\n            </div>\r\n\r\n            <Panel\r\n                headerText=\"Konfigurieren Sie die Erstellung von Antworten\"\r\n                isOpen={isConfigPanelOpen}\r\n                isBlocking={false}\r\n                onDismiss={() => setIsConfigPanelOpen(false)}\r\n                closeButtonAriaLabel=\"Close\"\r\n                onRenderFooterContent={() => <DefaultButton onClick={() => setIsConfigPanelOpen(false)}>Close</DefaultButton>}\r\n                isFooterAtBottom={true}\r\n            >\r\n                <TextField\r\n                    className={styles.oneshotSettingsSeparator}\r\n                    defaultValue={promptTemplate}\r\n                    label=\"Prompt Vorlage überschreiben\"\r\n                    multiline\r\n                    autoAdjustHeight\r\n                    onChange={onPromptTemplateChange}\r\n                />\r\n\r\n                {useLogin && (\r\n                    <Checkbox\r\n                        className={styles.oneshotSettingsSeparator}\r\n                        checked={useOidSecurityFilter || requireAccessControl}\r\n                        label=\"Use oid security filter\"\r\n                        disabled={!isLoggedIn(client) || requireAccessControl}\r\n                        onChange={onUseOidSecurityFilterChange}\r\n                    />\r\n                )}\r\n                {useLogin && (\r\n                    <Checkbox\r\n                        className={styles.oneshotSettingsSeparator}\r\n                        checked={useGroupsSecurityFilter || requireAccessControl}\r\n                        label=\"Use groups security filter\"\r\n                        disabled={!isLoggedIn(client) || requireAccessControl}\r\n                        onChange={onUseGroupsSecurityFilterChange}\r\n                    />\r\n                )}\r\n                {useLogin && <TokenClaimsDisplay />}\r\n            </Panel>\r\n        </div>\r\n    );\r\n}\r\n\r\nComponent.displayName = \"Marketing\";\r\n"],"names":["client","useLogin","useMsal","dropdownStyles","dropdownCorrectnessOptions","dropdownBenefitsOptions","EvaluationInputMarketing","disabled","question","answer","tabName","showInfo","setShowInfo","useState","instance","requireAccessControl","isLoggedIn","user","setUser","selectedBenefits","setSelectedBenefits","onUserChange","_ev","newValue","correct_answer","setCorrectAnswer","onCorrectAnswerChange","benefitMinuten","setBenefitMinuten","onBenefitMinutenChange","sonstiges","setSonstiges","onSonstigesChange","onChangeSelectedBenefit","event","item","index","updatedSelection","indexToRemove","option","makeApiRequest","token","getToken","contextList","context","dict","currentDatetime","benefitsListe","newline","selectedCorrectness","dataToAppend","result","appendToBlobApi","e","setSelectedCorrectness","jsx","jsxs","Stack","styles","Dropdown","opt","TextField","IconButton","Component","isConfigPanelOpen","setIsConfigPanelOpen","promptTemplate","setPromptTemplate","promptTemplatePrefix","setPromptTemplatePrefix","promptTemplateSuffix","setPromptTemplateSuffix","retrievalMode","setRetrievalMode","RetrievalMode","retrieveCount","setRetrieveCount","useSemanticRanker","setUseSemanticRanker","useSemanticCaptions","setUseSemanticCaptions","useGPT4V","setUseGPT4V","gpt4vInput","setGPT4VInput","GPT4VInput","excludeCategory","setExcludeCategory","setQuestion","vectorFieldList","setVectorFieldList","VectorFieldOptions","useOidSecurityFilter","setUseOidSecurityFilter","useGroupsSecurityFilter","setUseGroupsSecurityFilter","showGPT4VOptions","setShowGPT4VOptions","lastQuestionRef","useRef","isLoading","setIsLoading","error","setError","setAnswer","activeCitation","setActiveCitation","activeAnalysisPanelTab","setActiveAnalysisPanelTab","getConfig","configApi","config","useEffect","request","marketingApi","onPromptTemplateChange","onExampleClicked","example","onShowCitation","citation","AnalysisPanelTabs","onToggleTab","tab","onUseOidSecurityFilterChange","checked","onUseGroupsSecurityFilterChange","SettingsButton","SparkleFilled","ExampleList","QuestionInput","Spinner","Answer","x","AnswerError","AnalysisPanel","Panel","DefaultButton","Checkbox","TokenClaimsDisplay"],"mappings":"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"}