{"version":3,"mappings":"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","names":["appServicesAuthTokenUrl","appServicesAuthLogoutUrl","fetchAuthSetup","response","authSetup","useLogin","requireAccessControl","msalConfig","loginRequest","tokenRequest","getRedirectUri","getAppServicesToken","r","json","acc","item","appServicesToken","appServicesLogout","isLoggedIn","client","getToken","error","LoginButton","instance","useMsal","activeAccount","handleLoginPopup","handleLogoutPopup","logoutText","jsx","DefaultButton","styles","Layout","jsxs","Link","NavLink","isActive","Outlet","BACKEND_URI","getHeaders","idToken","headers","askApi","request","parsedResponse","askDetailApi","marketingApi","configApi","chatApi","chatoriginalApi","getCitationFilePath","citation","appendToBlobApi","dataToAppend","RetrievalMode","GPT4VInput","VectorFieldOptions","parseAnswerToHtml","answer","isStreaming","onCitationClicked","citations","parsedAnswer","lastIndex","i","part","index","citationIndex","path","renderToStaticMarkup","AnswerIcon","Sparkle28Filled","Answer","isSelected","onThoughtProcessClicked","onFollowupQuestionClicked","showFollowupQuestions","followupQuestions","messageContent","useMemo","sanitizedAnswerHtml","DOMPurify","Stack","IconButton","x","AnswerLoading","animatedStyles","useSpring","animated","AnswerError","onRetry","ErrorCircle24Regular","PrimaryButton","QuestionInput","onSend","disabled","placeholder","clearOnSend","initQuestion","question","setQuestion","useState","useEffect","sendQuestion","onEnterPress","ev","onQuestionChange","_ev","newValue","disableRequiredAccessControl","sendQuestionDisabled","TextField","Tooltip","Button","Send28Filled","Example","text","value","onClick","CHAT_EXAMPLES","CHATORIGINAL_EXAMPLES","QA_EXAMPLES","MARKETING_EXAMPLES","ExampleList","onExampleClicked","useGPT4V","tabName","getExamplesArray","UserChatMessage","message","parseSupportingContentItem","parts","title","content","SupportingContent","supportingContent","textItems","imageItems","c","parsed","TextSupportingContent","AnalysisPanelTabs","pivotItemDisabledStyle","AnalysisPanel","activeTab","activeCitation","citationHeight","className","onActiveTabChanged","isDisabledSupportingContentTab","isDisabledCitationTab","Pivot","pivotItem","PivotItem","SettingsButton","Settings24Regular","ClearChatButton","Delete24Regular","TokenClaimsDisplay","ToString","a","items","key","originalKey","columns","createTableColumn","b","Label","DataGrid","DataGridHeader","DataGridRow","renderHeaderCell","DataGridHeaderCell","DataGridBody","rowId","renderCell","DataGridCell","dropdownStyles","dropdownCorrectnessOptions","dropdownBenefitsOptions","dropdownThemenOptions","EvaluationInputChat","showInfo","setShowInfo","user","setUser","onUserChange","correct_answer","setCorrectAnswer","onCorrectAnswerChange","sonstiges","setSonstiges","onSonstigesChange","benefitMinuten","setBenefitMinuten","onBenefitMinutenChange","selectedBenefits","setSelectedBenefits","onChangeSelectedBenefit","event","updatedSelection","indexToRemove","option","selectedThemen","setSelectedThemen","onChangeSelectedThemen","makeApiRequest","token","currentDatetime","benefitsListe","themenListe","newline","selectedCorrectness","result","e","setSelectedCorrectness","Dropdown","opt","Chat","isConfigPanelOpen","setIsConfigPanelOpen","promptTemplate","setPromptTemplate","retrieveCount","setRetrieveCount","retrievalMode","setRetrievalMode","useSemanticRanker","setUseSemanticRanker","shouldStream","setShouldStream","useSemanticCaptions","setUseSemanticCaptions","excludeCategory","setExcludeCategory","useSuggestFollowupQuestions","setUseSuggestFollowupQuestions","vectorFieldList","setVectorFieldList","useOidSecurityFilter","setUseOidSecurityFilter","useGroupsSecurityFilter","setUseGroupsSecurityFilter","gpt4vInput","setGPT4VInput","setUseGPT4V","lastQuestionRef","useRef","chatMessageStreamEnd","isLoading","setIsLoading","setIsStreaming","setError","setActiveCitation","activeAnalysisPanelTab","setActiveAnalysisPanelTab","selectedAnswer","setSelectedAnswer","answers","setAnswers","streamedAnswers","setStreamedAnswers","showGPT4VOptions","setShowGPT4VOptions","getConfig","config","handleAsyncRequest","responseBody","askResponse","updateState","newContent","resolve","latestResponse","readNDJSONStream","clearChat","onPromptTemplateChange","onUseOidSecurityFilterChange","checked","onUseGroupsSecurityFilterChange","example","onShowCitation","onToggleTab","tab","streamedAnswer","q","Fragment","SparkleFilled","Panel","Checkbox","layout","msalInstance","PublicClientApplication","EventType","account","MsalProvider","initializeIcons","router","createHashRouter","__vitePreload","ReactDOM","React","RouterProvider"],"sources":["../../../frontend/src/authConfig.ts","../../../frontend/src/components/LoginButton/LoginButton.tsx","../../../frontend/src/pages/layout/Layout.tsx","../../../frontend/src/api/api.ts","../../../frontend/src/api/models.ts","../../../frontend/src/components/Answer/AnswerParser.tsx","../../../frontend/src/components/Answer/AnswerIcon.tsx","../../../frontend/src/components/Answer/Answer.tsx","../../../frontend/src/components/Answer/AnswerLoading.tsx","../../../frontend/src/components/Answer/AnswerError.tsx","../../../frontend/src/components/QuestionInput/QuestionInput.tsx","../../../frontend/src/components/Example/Example.tsx","../../../frontend/src/components/Example/ExampleList.tsx","../../../frontend/src/components/UserChatMessage/UserChatMessage.tsx","../../../frontend/src/components/SupportingContent/SupportingContentParser.ts","../../../frontend/src/components/SupportingContent/SupportingContent.tsx","../../../frontend/src/components/AnalysisPanel/AnalysisPanelTabs.tsx","../../../frontend/src/components/AnalysisPanel/AnalysisPanel.tsx","../../../frontend/src/components/SettingsButton/SettingsButton.tsx","../../../frontend/src/components/ClearChatButton/ClearChatButton.tsx","../../../frontend/src/components/TokenClaimsDisplay/TokenClaimsDisplay.tsx","../../../frontend/src/components/EvaluationInputChat/EvaluationInputChat.tsx","../../../frontend/src/pages/chat/Chat.tsx","../../../frontend/src/index.tsx"],"sourcesContent":["// Refactored from https://github.com/Azure-Samples/ms-identity-javascript-react-tutorial/blob/main/1-Authentication/1-sign-in/SPA/src/authConfig.js\r\n\r\nimport { IPublicClientApplication } from \"@azure/msal-browser\";\r\n\r\nconst appServicesAuthTokenUrl = \".auth/me\";\r\nconst appServicesAuthLogoutUrl = \".auth/logout?post_logout_redirect_uri=/\";\r\n\r\ninterface AppServicesToken {\r\n    id_token: string;\r\n    access_token: string;\r\n    user_claims: Record<string, any>;\r\n}\r\n\r\ninterface AuthSetup {\r\n    // Set to true if login elements should be shown in the UI\r\n    useLogin: boolean;\r\n    // Set to true if access control is enforced by the application\r\n    requireAccessControl: boolean;\r\n    /**\r\n     * Configuration object to be passed to MSAL instance on creation.\r\n     * For a full list of MSAL.js configuration parameters, visit:\r\n     * https://github.com/AzureAD/microsoft-authentication-library-for-js/blob/dev/lib/msal-browser/docs/configuration.md\r\n     */\r\n    msalConfig: {\r\n        auth: {\r\n            clientId: string; // Client app id used for login\r\n            authority: string; // Directory to use for login https://learn.microsoft.com/azure/active-directory/develop/msal-client-application-configuration#authority\r\n            redirectUri: string; // Points to window.location.origin. You must register this URI on Azure Portal/App Registration.\r\n            postLogoutRedirectUri: string; // Indicates the page to navigate after logout.\r\n            navigateToLoginRequestUrl: boolean; // If \"true\", will navigate back to the original request location before processing the auth code response.\r\n        };\r\n        cache: {\r\n            cacheLocation: string; // Configures cache location. \"sessionStorage\" is more secure, but \"localStorage\" gives you SSO between tabs.\r\n            storeAuthStateInCookie: boolean; // Set this to \"true\" if you are having issues on IE11 or Edge\r\n        };\r\n    };\r\n    loginRequest: {\r\n        /**\r\n         * Scopes you add here will be prompted for user consent during sign-in.\r\n         * By default, MSAL.js will add OIDC scopes (openid, profile, email) to any login request.\r\n         * For more information about OIDC scopes, visit:\r\n         * https://docs.microsoft.com/azure/active-directory/develop/v2-permissions-and-consent#openid-connect-scopes\r\n         */\r\n        scopes: Array<string>;\r\n    };\r\n    tokenRequest: {\r\n        scopes: Array<string>;\r\n    };\r\n}\r\n\r\n// Fetch the auth setup JSON data from the API if not already cached\r\nasync function fetchAuthSetup(): Promise<AuthSetup> {\r\n    const response = await fetch(\"/auth_setup\");\r\n    if (!response.ok) {\r\n        throw new Error(`auth setup response was not ok: ${response.status}`);\r\n    }\r\n    return await response.json();\r\n}\r\n\r\nconst authSetup = await fetchAuthSetup();\r\n\r\nexport const useLogin = authSetup.useLogin;\r\n\r\nexport const requireAccessControl = authSetup.requireAccessControl;\r\n\r\n/**\r\n * Configuration object to be passed to MSAL instance on creation.\r\n * For a full list of MSAL.js configuration parameters, visit:\r\n * https://github.com/AzureAD/microsoft-authentication-library-for-js/blob/dev/lib/msal-browser/docs/configuration.md\r\n */\r\nexport const msalConfig = authSetup.msalConfig;\r\n\r\n/**\r\n * Scopes you add here will be prompted for user consent during sign-in.\r\n * By default, MSAL.js will add OIDC scopes (openid, profile, email) to any login request.\r\n * For more information about OIDC scopes, visit:\r\n * https://docs.microsoft.com/en-us/azure/active-directory/develop/v2-permissions-and-consent#openid-connect-scopes\r\n */\r\nexport const loginRequest = authSetup.loginRequest;\r\n\r\nconst tokenRequest = authSetup.tokenRequest;\r\n\r\n// Build an absolute redirect URI using the current window's location and the relative redirect URI from auth setup\r\nexport const getRedirectUri = () => {\r\n    return window.location.origin + authSetup.msalConfig.auth.redirectUri;\r\n};\r\n\r\n// Get an access token if a user logged in using app services authentication\r\n// Returns null if the app doesn't support app services authentication\r\nconst getAppServicesToken = (): Promise<AppServicesToken | null> => {\r\n    return fetch(appServicesAuthTokenUrl).then(r => {\r\n        if (r.ok) {\r\n            return r.json().then(json => {\r\n                if (json.length > 0) {\r\n                    return {\r\n                        id_token: json[0][\"id_token\"] as string,\r\n                        access_token: json[0][\"access_token\"] as string,\r\n                        user_claims: json[0][\"user_claims\"].reduce((acc: Record<string, any>, item: Record<string, any>) => {\r\n                            acc[item.typ] = item.val;\r\n                            return acc;\r\n                        }, {}) as Record<string, any>\r\n                    };\r\n                }\r\n\r\n                return null;\r\n            });\r\n        }\r\n\r\n        return null;\r\n    });\r\n};\r\n\r\nexport const appServicesToken = await getAppServicesToken();\r\n\r\n// Sign out of app services\r\n// Learn more at https://learn.microsoft.com/azure/app-service/configure-authentication-customize-sign-in-out#sign-out-of-a-session\r\nexport const appServicesLogout = () => {\r\n    window.location.href = appServicesAuthLogoutUrl;\r\n};\r\n\r\n// Determine if the user is logged in\r\n// The user may have logged in either using the app services login or the on-page login\r\nexport const isLoggedIn = (client: IPublicClientApplication | undefined): boolean => {\r\n    return client?.getActiveAccount() != null || appServicesToken != null;\r\n};\r\n\r\n// Get an access token for use with the API server.\r\n// ID token received when logging in may not be used for this purpose because it has the incorrect audience\r\n// Use the access token from app services login if available\r\nexport const getToken = (client: IPublicClientApplication): Promise<string | undefined> => {\r\n    if (appServicesToken) {\r\n        return Promise.resolve(appServicesToken.access_token);\r\n    }\r\n\r\n    return client\r\n        .acquireTokenSilent({\r\n            ...tokenRequest,\r\n            redirectUri: getRedirectUri()\r\n        })\r\n        .then(r => r.accessToken)\r\n        .catch(error => {\r\n            console.log(error);\r\n            return undefined;\r\n        });\r\n};\r\n","import { DefaultButton } from \"@fluentui/react\";\r\nimport { useMsal } from \"@azure/msal-react\";\r\n\r\nimport styles from \"./LoginButton.module.css\";\r\nimport { getRedirectUri, loginRequest } from \"../../authConfig\";\r\nimport { appServicesToken, appServicesLogout } from \"../../authConfig\";\r\n\r\nexport const LoginButton = () => {\r\n    const { instance } = useMsal();\r\n    const activeAccount = instance.getActiveAccount();\r\n    const isLoggedIn = (activeAccount || appServicesToken) != null;\r\n\r\n    const handleLoginPopup = () => {\r\n        /**\r\n         * When using popup and silent APIs, we recommend setting the redirectUri to a blank page or a page\r\n         * that does not implement MSAL. Keep in mind that all redirect routes must be registered with the application\r\n         * For more information, please follow this link: https://github.com/AzureAD/microsoft-authentication-library-for-js/blob/dev/lib/msal-browser/docs/login-user.md#redirecturi-considerations\r\n         */\r\n        instance\r\n            .loginPopup({\r\n                ...loginRequest,\r\n                redirectUri: getRedirectUri()\r\n            })\r\n            .catch(error => console.log(error));\r\n    };\r\n    const handleLogoutPopup = () => {\r\n        if (activeAccount) {\r\n            instance\r\n                .logoutPopup({\r\n                    mainWindowRedirectUri: \"/\", // redirects the top level app after logout\r\n                    account: instance.getActiveAccount()\r\n                })\r\n                .catch(error => console.log(error));\r\n        } else {\r\n            appServicesLogout();\r\n        }\r\n    };\r\n    const logoutText = `Logout\\n${activeAccount?.username ?? appServicesToken?.user_claims?.preferred_username}`;\r\n    return (\r\n        <DefaultButton\r\n            text={isLoggedIn ? logoutText : \"Login\"}\r\n            className={styles.loginButton}\r\n            onClick={isLoggedIn ? handleLogoutPopup : handleLoginPopup}\r\n        ></DefaultButton>\r\n    );\r\n};\r\n","import { Outlet, NavLink, Link } from \"react-router-dom\";\r\n\r\nimport github from \"../../assets/github.svg\";\r\n\r\nimport styles from \"./Layout.module.css\";\r\n\r\nimport { useLogin } from \"../../authConfig\";\r\n\r\nimport { LoginButton } from \"../../components/LoginButton\";\r\n\r\nconst Layout = () => {\r\n    return (\r\n        <div className={styles.layout}>\r\n            <header className={styles.header} role={\"banner\"} style={{ backgroundColor: \"#9CBF2B\" }}>\r\n                <div className={styles.headerContainer}>\r\n                    <Link to=\"/\" className={styles.headerTitleContainer}>\r\n                        <h3 className={styles.headerTitle}>PCS - ATHENA KI</h3>\r\n                    </Link>\r\n                    <nav>\r\n                        <ul className={styles.headerNavList}>\r\n                            <li>\r\n                                <NavLink to=\"/\" className={({ isActive }) => (isActive ? styles.headerNavPageLinkActive : styles.headerNavPageLink)}>\r\n                                    Chat\r\n                                </NavLink>\r\n                            </li>\r\n                            <li className={styles.headerNavLeftMargin}>\r\n                                <NavLink to=\"/qa\" className={({ isActive }) => (isActive ? styles.headerNavPageLinkActive : styles.headerNavPageLink)}>\r\n                                    Q&A\r\n                                </NavLink>\r\n                            </li>\r\n                            <li className={styles.headerNavLeftMargin}>\r\n                                <NavLink to=\"/qadetail\" className={({ isActive }) => (isActive ? styles.headerNavPageLinkActive : styles.headerNavPageLink)}>\r\n                                    Q&A Detail\r\n                                </NavLink>\r\n                            </li>\r\n                            <li className={styles.headerNavLeftMargin}>\r\n                                <NavLink to=\"/marketing\" className={({ isActive }) => (isActive ? styles.headerNavPageLinkActive : styles.headerNavPageLink)}>\r\n                                    PM/MarCom\r\n                                </NavLink>\r\n                            </li>\r\n                            <li className={styles.headerNavLeftMargin}>\r\n                                <NavLink to=\"/chatgpt\" className={({ isActive }) => (isActive ? styles.headerNavPageLinkActive : styles.headerNavPageLink)}>\r\n                                    ChatGPT original\r\n                                </NavLink>\r\n                            </li>\r\n                            <li className={styles.headerNavLeftMargin}>\r\n                                <NavLink to=\"/info\" className={({ isActive }) => (isActive ? styles.headerNavPageLinkActive : styles.headerNavPageLink)}>\r\n                                    Info\r\n                                </NavLink>\r\n                            </li>\r\n                        </ul>\r\n                    </nav>\r\n                    <h4 className={styles.headerRightText}>Beta Phase</h4>\r\n                    {useLogin && <LoginButton />}\r\n                </div>\r\n            </header>\r\n\r\n            <Outlet />\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Layout;\r\n","const BACKEND_URI = \"\";\r\n\r\nimport { ChatAppResponse, ChatAppResponseOrError, ChatAppRequest, Config } from \"./models\";\r\nimport { useLogin, appServicesToken } from \"../authConfig\";\r\n\r\nfunction getHeaders(idToken: string | undefined): Record<string, string> {\r\n    var headers: Record<string, string> = {\r\n        \"Content-Type\": \"application/json\"\r\n    };\r\n    // If using login and not using app services, add the id token of the logged in account as the authorization\r\n    if (useLogin && appServicesToken == null) {\r\n        if (idToken) {\r\n            headers[\"Authorization\"] = `Bearer ${idToken}`;\r\n        }\r\n    }\r\n\r\n    return headers;\r\n}\r\n\r\nexport async function askApi(request: ChatAppRequest, idToken: string | undefined): Promise<ChatAppResponse> {\r\n    const response = await fetch(`${BACKEND_URI}/ask`, {\r\n        method: \"POST\",\r\n        headers: getHeaders(idToken),\r\n        body: JSON.stringify(request)\r\n    });\r\n\r\n    const parsedResponse: ChatAppResponseOrError = await response.json();\r\n    if (response.status > 299 || !response.ok) {\r\n        throw Error(parsedResponse.error || \"Unknown error\");\r\n    }\r\n\r\n    return parsedResponse as ChatAppResponse;\r\n}\r\n\r\nexport async function askDetailApi(request: ChatAppRequest, idToken: string | undefined): Promise<ChatAppResponse> {\r\n    const response = await fetch(`${BACKEND_URI}/askdetail`, {\r\n        method: \"POST\",\r\n        headers: getHeaders(idToken),\r\n        body: JSON.stringify(request)\r\n    });\r\n\r\n    const parsedResponse: ChatAppResponseOrError = await response.json();\r\n    if (response.status > 299 || !response.ok) {\r\n        throw Error(parsedResponse.error || \"Unknown error\");\r\n    }\r\n\r\n    return parsedResponse as ChatAppResponse;\r\n}\r\n\r\nexport async function marketingApi(request: ChatAppRequest, idToken: string | undefined): Promise<ChatAppResponse> {\r\n    const response = await fetch(`${BACKEND_URI}/marketingqa`, {\r\n        method: \"POST\",\r\n        headers: getHeaders(idToken),\r\n        body: JSON.stringify(request)\r\n    });\r\n\r\n    const parsedResponse: ChatAppResponseOrError = await response.json();\r\n    if (response.status > 299 || !response.ok) {\r\n        throw Error(parsedResponse.error || \"Unknown error\");\r\n    }\r\n\r\n    return parsedResponse as ChatAppResponse;\r\n}\r\n\r\nexport async function configApi(idToken: string | undefined): Promise<Config> {\r\n    const response = await fetch(`${BACKEND_URI}/config`, {\r\n        method: \"GET\",\r\n        headers: getHeaders(idToken)\r\n    });\r\n\r\n    return (await response.json()) as Config;\r\n}\r\n\r\nexport async function chatApi(request: ChatAppRequest, idToken: string | undefined): Promise<Response> {\r\n    return await fetch(`${BACKEND_URI}/chat`, {\r\n        method: \"POST\",\r\n        headers: getHeaders(idToken),\r\n        body: JSON.stringify(request)\r\n    });\r\n}\r\n\r\nexport async function chatoriginalApi(request: ChatAppRequest, idToken: string | undefined): Promise<Response> {\r\n    return await fetch(`${BACKEND_URI}/chatoriginal`, {\r\n        method: \"POST\",\r\n        headers: getHeaders(idToken),\r\n        body: JSON.stringify(request)\r\n    });\r\n}\r\n\r\nexport function getCitationFilePath(citation: string): string {\r\n    return `${BACKEND_URI}/content/${citation}`;\r\n}\r\n\r\nexport async function appendToBlobApi(dataToAppend: string, idToken: string | undefined): Promise<string> {\r\n    console.log(\"writing to Blob\");\r\n\r\n    const response = await fetch(`${BACKEND_URI}/appendtoBlob`, {\r\n        method: \"POST\",\r\n        headers: getHeaders(idToken),\r\n        body: JSON.stringify({ data: dataToAppend })\r\n    });\r\n\r\n    if (response.status == 200) {\r\n        return \"Success\";\r\n    } else {\r\n        console.error(\"Error appending to Blob:\", response.statusText);\r\n        return \"Problem\";\r\n    }\r\n}\r\n","export const enum RetrievalMode {\r\n    Hybrid = \"hybrid\",\r\n    Vectors = \"vectors\",\r\n    Text = \"text\"\r\n}\r\n\r\nexport const enum GPT4VInput {\r\n    TextAndImages = \"textAndImages\",\r\n    Images = \"images\",\r\n    Texts = \"texts\"\r\n}\r\n\r\nexport const enum VectorFieldOptions {\r\n    Embedding = \"embedding\",\r\n    ImageEmbedding = \"imageEmbedding\",\r\n    Both = \"both\"\r\n}\r\n\r\nexport type ChatAppRequestOverrides = {\r\n    retrieval_mode?: RetrievalMode;\r\n    semantic_ranker?: boolean;\r\n    semantic_captions?: boolean;\r\n    exclude_category?: string;\r\n    top?: number;\r\n    temperature?: number;\r\n    prompt_template?: string;\r\n    prompt_template_prefix?: string;\r\n    prompt_template_suffix?: string;\r\n    suggest_followup_questions?: boolean;\r\n    use_oid_security_filter?: boolean;\r\n    use_groups_security_filter?: boolean;\r\n    use_gpt4v?: boolean;\r\n    gpt4v_input?: GPT4VInput;\r\n    vector_fields: VectorFieldOptions[];\r\n};\r\n\r\nexport type ResponseMessage = {\r\n    content: string;\r\n    role: string;\r\n};\r\n\r\nexport type Thoughts = {\r\n    title: string;\r\n    description: any; // It can be any output from the api\r\n    props?: { [key: string]: string };\r\n};\r\n\r\nexport type ResponseContext = {\r\n    data_points: string[];\r\n    followup_questions: string[] | null;\r\n    thoughts: Thoughts[];\r\n};\r\n\r\nexport type ResponseChoice = {\r\n    index: number;\r\n    message: ResponseMessage;\r\n    context: ResponseContext;\r\n    session_state: any;\r\n};\r\n\r\nexport type ChatAppResponseOrError = {\r\n    choices?: ResponseChoice[];\r\n    error?: string;\r\n};\r\n\r\nexport type ChatAppResponse = {\r\n    choices: ResponseChoice[];\r\n};\r\n\r\nexport type ChatAppRequestContext = {\r\n    overrides?: ChatAppRequestOverrides;\r\n};\r\n\r\nexport type ChatAppRequest = {\r\n    messages: ResponseMessage[];\r\n    context?: ChatAppRequestContext;\r\n    stream?: boolean;\r\n    session_state: any;\r\n};\r\n\r\nexport type Config = {\r\n    showGPT4VOptions: boolean;\r\n};\r\n","import { renderToStaticMarkup } from \"react-dom/server\";\r\nimport { getCitationFilePath } from \"../../api\";\r\n\r\ntype HtmlParsedAnswer = {\r\n    answerHtml: string;\r\n    citations: string[];\r\n};\r\n\r\nexport function parseAnswerToHtml(answer: string, isStreaming: boolean, onCitationClicked: (citationFilePath: string) => void): HtmlParsedAnswer {\r\n    const citations: string[] = [];\r\n\r\n    // trim any whitespace from the end of the answer after removing follow-up questions\r\n    let parsedAnswer = answer.trim();\r\n\r\n    // Omit a citation that is still being typed during streaming\r\n    if (isStreaming) {\r\n        let lastIndex = parsedAnswer.length;\r\n        for (let i = parsedAnswer.length - 1; i >= 0; i--) {\r\n            if (parsedAnswer[i] === \"]\") {\r\n                break;\r\n            } else if (parsedAnswer[i] === \"[\") {\r\n                lastIndex = i;\r\n                break;\r\n            }\r\n        }\r\n        const truncatedAnswer = parsedAnswer.substring(0, lastIndex);\r\n        parsedAnswer = truncatedAnswer;\r\n    }\r\n\r\n    const parts = parsedAnswer.split(/\\[([^\\]]+)\\]/g);\r\n\r\n    const fragments: string[] = parts.map((part, index) => {\r\n        if (index % 2 === 0) {\r\n            return part;\r\n        } else {\r\n            let citationIndex: number;\r\n            if (citations.indexOf(part) !== -1) {\r\n                citationIndex = citations.indexOf(part) + 1;\r\n            } else {\r\n                citations.push(part);\r\n                citationIndex = citations.length;\r\n            }\r\n\r\n            const path = getCitationFilePath(part);\r\n\r\n            return renderToStaticMarkup(\r\n                <a className=\"supContainer\" title={part} onClick={() => onCitationClicked(path)}>\r\n                    <sup>{citationIndex}</sup>\r\n                </a>\r\n            );\r\n        }\r\n    });\r\n\r\n    return {\r\n        answerHtml: fragments.join(\"\"),\r\n        citations\r\n    };\r\n}\r\n","import { Sparkle28Filled } from \"@fluentui/react-icons\";\r\n\r\nexport const AnswerIcon = () => {\r\n    return <Sparkle28Filled primaryFill={\"#9CBF2B\"} aria-hidden=\"true\" aria-label=\"Answer logo\" />;\r\n};\r\n","import { useMemo } from \"react\";\r\nimport { Stack, IconButton } from \"@fluentui/react\";\r\nimport DOMPurify from \"dompurify\";\r\n\r\nimport styles from \"./Answer.module.css\";\r\n\r\nimport { ChatAppResponse, getCitationFilePath } from \"../../api\";\r\nimport { parseAnswerToHtml } from \"./AnswerParser\";\r\nimport { AnswerIcon } from \"./AnswerIcon\";\r\n\r\ninterface Props {\r\n    answer: ChatAppResponse;\r\n    isSelected?: boolean;\r\n    isStreaming: boolean;\r\n    onCitationClicked: (filePath: string) => void;\r\n    onThoughtProcessClicked: () => void;\r\n    // onSupportingContentClicked: () => void;\r\n    onFollowupQuestionClicked?: (question: string) => void;\r\n    showFollowupQuestions?: boolean;\r\n}\r\n\r\nexport const Answer = ({\r\n    answer,\r\n    isSelected,\r\n    isStreaming,\r\n    onCitationClicked,\r\n    onThoughtProcessClicked,\r\n    // onSupportingContentClicked,\r\n    onFollowupQuestionClicked,\r\n    showFollowupQuestions\r\n}: Props) => {\r\n    const followupQuestions = answer.choices[0].context.followup_questions;\r\n    const messageContent = answer.choices[0].message.content;\r\n    const parsedAnswer = useMemo(() => parseAnswerToHtml(messageContent, isStreaming, onCitationClicked), [answer]);\r\n\r\n    const sanitizedAnswerHtml = DOMPurify.sanitize(parsedAnswer.answerHtml);\r\n\r\n    return (\r\n        <Stack className={`${styles.answerContainer} ${isSelected && styles.selected}`} verticalAlign=\"space-between\">\r\n            <Stack.Item>\r\n                <Stack horizontal horizontalAlign=\"space-between\">\r\n                    <AnswerIcon />\r\n                    <div>\r\n                        <IconButton\r\n                            style={{ color: \"black\" }}\r\n                            iconProps={{ iconName: \"Lightbulb\" }}\r\n                            title=\"Infos anzeigen\"\r\n                            ariaLabel=\"Infos anzeigen\"\r\n                            onClick={() => onThoughtProcessClicked()}\r\n                            disabled={!answer.choices[0].context.thoughts?.length}\r\n                        />\r\n                    </div>\r\n                </Stack>\r\n            </Stack.Item>\r\n\r\n            <Stack.Item grow>\r\n                <div className={styles.answerText} dangerouslySetInnerHTML={{ __html: sanitizedAnswerHtml }}></div>\r\n                <div>\r\n                    Hinweis: ATHENA befindet sich derzeit noch in der Betaphase, weshalb die Antworten möglicherweise nicht immer korrekt sein können. Bitte\r\n                    bewerte die erhaltenen Antworten entsprechend. Vielen Dank für dein Verständnis!\r\n                </div>\r\n            </Stack.Item>\r\n\r\n            {!!parsedAnswer.citations.length && (\r\n                <Stack.Item>\r\n                    <Stack horizontal wrap tokens={{ childrenGap: 5 }}>\r\n                        <span className={styles.citationLearnMore}>Citations:</span>\r\n                        {parsedAnswer.citations.map((x, i) => {\r\n                            const path = getCitationFilePath(x);\r\n                            return (\r\n                                <a key={i} className={styles.citation} title={x} onClick={() => onCitationClicked(path)}>\r\n                                    {`${++i}. ${x}`}\r\n                                </a>\r\n                            );\r\n                        })}\r\n                    </Stack>\r\n                </Stack.Item>\r\n            )}\r\n\r\n            {!!followupQuestions?.length && showFollowupQuestions && onFollowupQuestionClicked && (\r\n                <Stack.Item>\r\n                    <Stack horizontal wrap className={`${!!parsedAnswer.citations.length ? styles.followupQuestionsList : \"\"}`} tokens={{ childrenGap: 6 }}>\r\n                        <span className={styles.followupQuestionLearnMore}>Follow-up questions:</span>\r\n                        {followupQuestions.map((x, i) => {\r\n                            return (\r\n                                <a key={i} className={styles.followupQuestion} title={x} onClick={() => onFollowupQuestionClicked(x)}>\r\n                                    {`${x}`}\r\n                                </a>\r\n                            );\r\n                        })}\r\n                    </Stack>\r\n                </Stack.Item>\r\n            )}\r\n        </Stack>\r\n    );\r\n};\r\n","import { Stack } from \"@fluentui/react\";\r\nimport { animated, useSpring } from \"@react-spring/web\";\r\n\r\nimport styles from \"./Answer.module.css\";\r\nimport { AnswerIcon } from \"./AnswerIcon\";\r\n\r\nexport const AnswerLoading = () => {\r\n    const animatedStyles = useSpring({\r\n        from: { opacity: 0 },\r\n        to: { opacity: 1 }\r\n    });\r\n\r\n    return (\r\n        <animated.div style={{ ...animatedStyles }}>\r\n            <Stack className={styles.answerContainer} verticalAlign=\"space-between\">\r\n                <AnswerIcon />\r\n                <Stack.Item grow>\r\n                    <p className={styles.answerText}>\r\n                        Athena arbeitet ...\r\n                        <span className={styles.loadingdots} />\r\n                    </p>\r\n                </Stack.Item>\r\n            </Stack>\r\n        </animated.div>\r\n    );\r\n};\r\n","import { Stack, PrimaryButton } from \"@fluentui/react\";\r\nimport { ErrorCircle24Regular } from \"@fluentui/react-icons\";\r\n\r\nimport styles from \"./Answer.module.css\";\r\n\r\ninterface Props {\r\n    error: string;\r\n    onRetry: () => void;\r\n}\r\n\r\nexport const AnswerError = ({ error, onRetry }: Props) => {\r\n    return (\r\n        <Stack className={styles.answerContainer} verticalAlign=\"space-between\">\r\n            <ErrorCircle24Regular aria-hidden=\"true\" aria-label=\"Error icon\" primaryFill=\"red\" />\r\n\r\n            <Stack.Item grow>\r\n                <p className={styles.answerText}>{error}</p>\r\n            </Stack.Item>\r\n\r\n            <PrimaryButton className={styles.retryButton} onClick={onRetry} text=\"Retry\" />\r\n        </Stack>\r\n    );\r\n};\r\n","import { useEffect, useState } from \"react\";\r\nimport { useMsal } from \"@azure/msal-react\";\r\nimport { Stack, TextField } from \"@fluentui/react\";\r\nimport { Button, Tooltip, Field, Textarea } from \"@fluentui/react-components\";\r\nimport { Send28Filled } from \"@fluentui/react-icons\";\r\nimport { isLoggedIn, requireAccessControl } from \"../../authConfig\";\r\n\r\nimport styles from \"./QuestionInput.module.css\";\r\n\r\ninterface Props {\r\n    onSend: (question: string) => void;\r\n    disabled: boolean;\r\n    initQuestion?: string;\r\n    placeholder?: string;\r\n    clearOnSend?: boolean;\r\n}\r\n\r\nexport const QuestionInput = ({ onSend, disabled, placeholder, clearOnSend, initQuestion }: Props) => {\r\n    const [question, setQuestion] = useState<string>(\"\");\r\n\r\n    useEffect(() => {\r\n        initQuestion && setQuestion(initQuestion);\r\n    }, [initQuestion]);\r\n\r\n    const sendQuestion = () => {\r\n        if (disabled || !question.trim()) {\r\n            return;\r\n        }\r\n\r\n        onSend(question);\r\n\r\n        if (clearOnSend) {\r\n            setQuestion(\"\");\r\n        }\r\n    };\r\n\r\n    const onEnterPress = (ev: React.KeyboardEvent<Element>) => {\r\n        if (ev.key === \"Enter\" && !ev.shiftKey) {\r\n            ev.preventDefault();\r\n            sendQuestion();\r\n        }\r\n    };\r\n\r\n    const onQuestionChange = (_ev: React.FormEvent<HTMLInputElement | HTMLTextAreaElement>, newValue?: string) => {\r\n        if (!newValue) {\r\n            setQuestion(\"\");\r\n        } else if (newValue.length <= 3000) {\r\n            setQuestion(newValue);\r\n        } // catch if the input was too long\r\n    };\r\n\r\n    const { instance } = useMsal();\r\n    const disableRequiredAccessControl = requireAccessControl && !isLoggedIn(instance);\r\n    const sendQuestionDisabled = disabled || !question.trim() || disableRequiredAccessControl;\r\n\r\n    if (disableRequiredAccessControl) {\r\n        placeholder = \"Please login to continue...\";\r\n    }\r\n\r\n    return (\r\n        <Stack horizontal className={styles.questionInputContainer}>\r\n            <TextField\r\n                className={styles.questionInputTextArea}\r\n                disabled={disableRequiredAccessControl}\r\n                placeholder={placeholder}\r\n                multiline={true}\r\n                resizable={true}\r\n                autoAdjustHeight\r\n                borderless\r\n                value={question}\r\n                onChange={onQuestionChange}\r\n                onKeyDown={onEnterPress}\r\n            />\r\n            <div className={styles.questionInputButtonsContainer}>\r\n                <Tooltip content=\"Ask question button\" relationship=\"label\">\r\n                    <Button size=\"large\" icon={<Send28Filled primaryFill=\"#9CBF2B\" />} disabled={sendQuestionDisabled} onClick={sendQuestion} />\r\n                </Tooltip>\r\n            </div>\r\n        </Stack>\r\n    );\r\n};\r\n","import styles from \"./Example.module.css\";\r\n\r\ninterface Props {\r\n    text: string;\r\n    value: string;\r\n    onClick: (value: string) => void;\r\n}\r\n\r\nexport const Example = ({ text, value, onClick }: Props) => {\r\n    return (\r\n        <div className={styles.example} onClick={() => onClick(value)}>\r\n            <p className={styles.exampleText}>{text}</p>\r\n        </div>\r\n    );\r\n};\r\n","import { Example } from \"./Example\";\r\n\r\nimport styles from \"./Example.module.css\";\r\n\r\nconst CHAT_EXAMPLES: string[] = [\r\n    \"Was ist der KP1 Satz?\",\r\n    'Wie viele Leser können am \"INTUS ACM40e\" angeschlossen werden?',\r\n    \"Wie binde ich via TCL ein Terminal an?\"\r\n];\r\n\r\nconst CHATORIGINAL_EXAMPLES: string[] = [\r\n    \"Formuliere eine E-Mail an den Kunden: Der Kunde beschwert über fehlerhaftes Produkt und erwartet bis morgen eine Lösung. Er ist frustriert und droht mit Eskalation an die Geschäftsführung. Er erwartet eine schnelle Lösung für das Problem.\",\r\n    \"Wie organisiere ich ein Projekt für die Einführung einer Software?\"\r\n];\r\n\r\nconst QA_EXAMPLES: string[] = [\r\n    \"Wie lautet die Bestellnummer für das I5200-Interfacemodul?\",\r\n    \"Welche aktuellen RFID-Leseverfahren empfiehlt PCS?\",\r\n    \"Was beinhaltet der präventive Wartungsvertrag? \"\r\n];\r\n\r\nconst MARKETING_EXAMPLES: string[] = [\r\n    \"Verfasse einen Fachartikel für eine Zeitschrift zum Thema Zutrittskontrolle. Betone dabei die aktuellen Entwicklungen, Herausforderungen und potenzielle Lösungen in diesem Fachbereich. Achte auf eine klare Struktur, wissenschaftliche Genauigkeit und präzise Formulierungen. Der Artikel sollte informativ sein und sich an ein Fachpublikum richten, das mit den grundlegenden Konzepten des Themas vertraut ist.\",\r\n    \"Entwickle eine Reihe von praxisnahen Use Cases für das Thema Softwaremonitoring eines Zeiterfassungsterminalherstellers . Beschreibe detailliert die Anwendungsszenarien, die beteiligten Akteure, ihre spezifischen Aufgaben und die erwarteten Ergebnisse. Betone dabei die Mehrwerte und Vorteile der jeweiligen Use Cases. Berücksichtige mögliche Herausforderungen und präsentiere realistische Lösungsansätze. Ziel ist es, die Vielseitigkeit und Anwendbarkeit des Themas durch konkrete Beispiele zu veranschaulichen.\"\r\n];\r\n\r\nconst GPT4V_EXAMPLES: string[] = [\r\n    \"Compare the impact of interest rates and GDP in financial markets.\",\r\n    \"What is the expected trend for the S&P 500 index over the next five years? Compare it to the past S&P 500 performance\",\r\n    \"Can you identify any correlation between oil prices and stock market trends?\"\r\n];\r\n\r\ninterface Props {\r\n    onExampleClicked: (value: string) => void;\r\n    useGPT4V?: boolean;\r\n    tabName?: string;\r\n}\r\n\r\nexport const ExampleList = ({ onExampleClicked, useGPT4V, tabName }: Props) => {\r\n    const getExamplesArray = () => {\r\n        switch (tabName) {\r\n            case \"chatgpt\":\r\n                return CHAT_EXAMPLES;\r\n            case \"chatgptoriginal\":\r\n                return CHATORIGINAL_EXAMPLES;\r\n            case \"qa\":\r\n                return QA_EXAMPLES;\r\n            case \"marketing\":\r\n                return MARKETING_EXAMPLES;\r\n            default:\r\n                return CHAT_EXAMPLES;\r\n        }\r\n    };\r\n\r\n    return (\r\n        <ul className={styles.examplesNavList}>\r\n            {getExamplesArray().map((question, i) => (\r\n                <li key={i}>\r\n                    <Example text={question} value={question} onClick={onExampleClicked} />\r\n                </li>\r\n            ))}\r\n        </ul>\r\n    );\r\n};\r\n","import styles from \"./UserChatMessage.module.css\";\r\n\r\ninterface Props {\r\n    message: string;\r\n}\r\n\r\nexport const UserChatMessage = ({ message }: Props) => {\r\n    return (\r\n        <div className={styles.container}>\r\n            <div className={styles.message}>{message}</div>\r\n        </div>\r\n    );\r\n};\r\n","import DOMPurify from \"dompurify\";\r\n\r\ntype ParsedSupportingContentItem = {\r\n    title: string;\r\n    content: string;\r\n};\r\n\r\nexport function parseSupportingContentItem(item: string): ParsedSupportingContentItem {\r\n    // Assumes the item starts with the file name followed by : and the content.\r\n    // Example: \"sdp_corporate.pdf: this is the content that follows\".\r\n    const parts = item.split(\": \");\r\n    const title = parts[0];\r\n    const content = DOMPurify.sanitize(parts.slice(1).join(\": \"));\r\n\r\n    return {\r\n        title,\r\n        content\r\n    };\r\n}\r\n","import { parseSupportingContentItem } from \"./SupportingContentParser\";\r\n\r\nimport styles from \"./SupportingContent.module.css\";\r\n\r\ninterface Props {\r\n    supportingContent: string[] | { text: string[]; images?: { url: string }[] };\r\n}\r\n\r\ninterface SupportingItemProps {\r\n    title: string;\r\n    content: string;\r\n}\r\n\r\nexport const SupportingContent = ({ supportingContent }: Props) => {\r\n    const textItems = Array.isArray(supportingContent) ? supportingContent : supportingContent.text;\r\n    const imageItems = !Array.isArray(supportingContent) ? supportingContent?.images : [];\r\n    return (\r\n        <ul className={styles.supportingContentNavList}>\r\n            {textItems.map(c => {\r\n                const parsed = parseSupportingContentItem(c);\r\n                return <TextSupportingContent {...parsed} />;\r\n            })}\r\n            {imageItems?.map(i => {\r\n                return <img className={styles.supportingContentItemImage} src={i.url} />;\r\n            })}\r\n        </ul>\r\n    );\r\n};\r\n\r\nexport const TextSupportingContent = ({ title, content }: SupportingItemProps) => {\r\n    return (\r\n        <li className={styles.supportingContentItem}>\r\n            <h4 className={styles.supportingContentItemHeader}>{title}</h4>\r\n            <p className={styles.supportingContentItemText} dangerouslySetInnerHTML={{ __html: content }} />\r\n        </li>\r\n    );\r\n};\r\n","export enum AnalysisPanelTabs {\r\n    ThoughtProcessTab = \"thoughtProcess\",\r\n    SupportingContentTab = \"supportingContent\",\r\n    CitationTab = \"citation\"\r\n}\r\n","import { Stack, Pivot, PivotItem } from \"@fluentui/react\";\r\nimport SyntaxHighlighter from \"react-syntax-highlighter\";\r\n\r\nimport styles from \"./AnalysisPanel.module.css\";\r\n\r\nimport { SupportingContent } from \"../SupportingContent\";\r\nimport { ChatAppResponse } from \"../../api\";\r\nimport { AnalysisPanelTabs } from \"./AnalysisPanelTabs\";\r\nimport { ThoughtProcess } from \"./ThoughtProcess\";\r\n\r\ninterface Props {\r\n    className: string;\r\n    activeTab: AnalysisPanelTabs;\r\n    onActiveTabChanged: (tab: AnalysisPanelTabs) => void;\r\n    activeCitation: string | undefined;\r\n    citationHeight: string;\r\n    answer: ChatAppResponse;\r\n}\r\n\r\nconst pivotItemDisabledStyle = { disabled: true, style: { color: \"grey\" } };\r\n\r\nexport const AnalysisPanel = ({ answer, activeTab, activeCitation, citationHeight, className, onActiveTabChanged }: Props) => {\r\n    const isDisabledThoughtProcessTab: boolean = !answer.choices[0].context.thoughts;\r\n    const isDisabledSupportingContentTab: boolean = !answer.choices[0].context.data_points;\r\n    const isDisabledCitationTab: boolean = !activeCitation;\r\n\r\n    return (\r\n        <Pivot\r\n            className={className}\r\n            selectedKey={activeTab}\r\n            onLinkClick={pivotItem => pivotItem && onActiveTabChanged(pivotItem.props.itemKey! as AnalysisPanelTabs)}\r\n        >\r\n            <PivotItem\r\n                itemKey={AnalysisPanelTabs.SupportingContentTab}\r\n                headerText=\"Unterstützende Textabschnitte\"\r\n                headerButtonProps={isDisabledSupportingContentTab ? pivotItemDisabledStyle : undefined}\r\n            >\r\n                <SupportingContent supportingContent={answer.choices[0].context.data_points} />\r\n            </PivotItem>\r\n            <PivotItem\r\n                itemKey={AnalysisPanelTabs.CitationTab}\r\n                headerText=\"Dokumente\"\r\n                headerButtonProps={isDisabledCitationTab ? pivotItemDisabledStyle : undefined}\r\n            >\r\n                {activeCitation?.endsWith(\".png\") ? (\r\n                    <img src={activeCitation} className={styles.citationImg} />\r\n                ) : (\r\n                    <iframe title=\"Citation\" src={activeCitation} width=\"100%\" height={citationHeight} />\r\n                )}\r\n            </PivotItem>\r\n        </Pivot>\r\n    );\r\n};\r\n","import { Settings24Regular } from \"@fluentui/react-icons\";\r\nimport { Button } from \"@fluentui/react-components\";\r\n\r\nimport styles from \"./SettingsButton.module.css\";\r\n\r\ninterface Props {\r\n    className?: string;\r\n    onClick: () => void;\r\n}\r\n\r\nexport const SettingsButton = ({ className, onClick }: Props) => {\r\n    return (\r\n        <div className={`${styles.container} ${className ?? \"\"}`}>\r\n            <Button icon={<Settings24Regular />} onClick={onClick}>\r\n                {\"Einstellungen\"}\r\n            </Button>\r\n        </div>\r\n    );\r\n};\r\n","import { Delete24Regular } from \"@fluentui/react-icons\";\r\nimport { Button } from \"@fluentui/react-components\";\r\n\r\nimport styles from \"./ClearChatButton.module.css\";\r\n\r\ninterface Props {\r\n    className?: string;\r\n    onClick: () => void;\r\n    disabled?: boolean;\r\n}\r\n\r\nexport const ClearChatButton = ({ className, disabled, onClick }: Props) => {\r\n    return (\r\n        <div className={`${styles.container} ${className ?? \"\"}`}>\r\n            <Button icon={<Delete24Regular />} disabled={disabled} onClick={onClick}>\r\n                {\"Chat zurücksetzen\"}\r\n            </Button>\r\n        </div>\r\n    );\r\n};\r\n","import { Label } from \"@fluentui/react\";\r\nimport { useMsal } from \"@azure/msal-react\";\r\nimport {\r\n    DataGridBody,\r\n    DataGridRow,\r\n    DataGrid,\r\n    DataGridHeader,\r\n    DataGridHeaderCell,\r\n    DataGridCell,\r\n    createTableColumn,\r\n    TableColumnDefinition\r\n} from \"@fluentui/react-table\";\r\nimport { appServicesToken } from \"../../authConfig\";\r\n\r\ntype Claim = {\r\n    name: string;\r\n    value: string;\r\n};\r\n\r\nexport const TokenClaimsDisplay = () => {\r\n    const { instance } = useMsal();\r\n    const activeAccount = instance.getActiveAccount();\r\n\r\n    const ToString = (a: string | any) => {\r\n        if (typeof a === \"string\") {\r\n            return a;\r\n        } else {\r\n            return JSON.stringify(a);\r\n        }\r\n    };\r\n\r\n    let createClaims = (o: Record<string, unknown> | undefined) => {\r\n        return Object.keys(o ?? {}).map((key: string) => {\r\n            let originalKey = key;\r\n            try {\r\n                // Some claim names may be a URL to a full schema, just use the last part of the URL in this case\r\n                const url = new URL(key);\r\n                const parts = url.pathname.split(\"/\");\r\n                key = parts[parts.length - 1];\r\n            } catch (error) {\r\n                // Do not parse key if it's not a URL\r\n            }\r\n            return { name: key, value: ToString((o ?? {})[originalKey]) };\r\n        });\r\n    };\r\n    const items: Claim[] = createClaims(activeAccount?.idTokenClaims ?? appServicesToken?.user_claims);\r\n\r\n    const columns: TableColumnDefinition<Claim>[] = [\r\n        createTableColumn<Claim>({\r\n            columnId: \"name\",\r\n            compare: (a: Claim, b: Claim) => {\r\n                return a.name.localeCompare(b.name);\r\n            },\r\n            renderHeaderCell: () => {\r\n                return \"Name\";\r\n            },\r\n            renderCell: item => {\r\n                return item.name;\r\n            }\r\n        }),\r\n        createTableColumn<Claim>({\r\n            columnId: \"value\",\r\n            compare: (a: Claim, b: Claim) => {\r\n                return a.value.localeCompare(b.value);\r\n            },\r\n            renderHeaderCell: () => {\r\n                return \"Value\";\r\n            },\r\n            renderCell: item => {\r\n                return item.value;\r\n            }\r\n        })\r\n    ];\r\n\r\n    return (\r\n        <div>\r\n            <Label>ID Token Claims</Label>\r\n            <DataGrid items={items} columns={columns} sortable getRowId={item => item.name}>\r\n                <DataGridHeader>\r\n                    <DataGridRow>{({ renderHeaderCell }) => <DataGridHeaderCell>{renderHeaderCell()}</DataGridHeaderCell>}</DataGridRow>\r\n                </DataGridHeader>\r\n                <DataGridBody<Claim>>\r\n                    {({ item, rowId }) => <DataGridRow<Claim> key={rowId}>{({ renderCell }) => <DataGridCell>{renderCell(item)}</DataGridCell>}</DataGridRow>}\r\n                </DataGridBody>\r\n            </DataGrid>\r\n        </div>\r\n    );\r\n};\r\n","import { useEffect, useState } from \"react\";\r\nimport { useMsal } from \"@azure/msal-react\";\r\nimport { Stack, TextField, IconButton } from \"@fluentui/react\";\r\nimport { Dropdown, DropdownMenuItemType, IDropdownOption, IDropdownStyles } from \"@fluentui/react/lib/Dropdown\";\r\n\r\nimport { AnimalTurtle16Filled, Send28Filled } from \"@fluentui/react-icons\";\r\nimport { useLogin, getToken, isLoggedIn, requireAccessControl } from \"../../authConfig\";\r\nimport { ChatAppResponse, appendToBlobApi } from \"../../api\";\r\n\r\nimport styles from \"./EvaluationInput.module.css\";\r\nimport { to } from \"@react-spring/web\";\r\n\r\ninterface Props {\r\n    disabled: boolean;\r\n    tabName: string;\r\n    // answer: ChatAppResponse;\r\n    // question: string;\r\n}\r\n\r\nconst client = useLogin ? useMsal().instance : undefined;\r\n\r\nconst dropdownStyles: Partial<IDropdownStyles> = { dropdown: { width: 300 } };\r\n\r\nconst dropdownCorrectnessOptions = [\r\n    { key: \"ja\", text: \"Ja\" },\r\n    { key: \"teils\", text: \"Teils\" },\r\n    { key: \"nein\", text: \"Nein\" },\r\n    { key: \"nicht beurteilbar\", text: \"Nicht beurteilbar\" }\r\n];\r\n\r\nconst dropdownBenefitsOptions = [\r\n    { key: \"Suchaufwand in interner Doku erspart.\", text: \"Suchaufwand in interner Doku erspart.\" },\r\n    { key: \"Rücksprache mit Kollegen erspart.\", text: \"Rücksprache mit Kollegen erspart.\" },\r\n    { key: \"Rücksprache mit Experten erspart.\", text: \"Rücksprache mit Experten erspart.\" },\r\n    { key: \"Sonstiges, siehe unten:\", text: \"Sonstiges, siehe unten:\" }\r\n];\r\n\r\nconst dropdownThemenOptions = [\r\n    { key: \"5200\", text: \"5200\" },\r\n    { key: \"5205\", text: \"5205\" },\r\n    { key: \"5320\", text: \"5320\" },\r\n    { key: \"5500\", text: \"5500\" },\r\n    { key: \"5540\", text: \"5540\" },\r\n    { key: \"5600\", text: \"5600\" },\r\n    { key: \"ACM40e\", text: \"ACM40e\" },\r\n    { key: \"ACM80eRack\", text: \"ACM80eRack\" },\r\n    { key: \"ACM80eWand\", text: \"ACM80eWand\" },\r\n    { key: \"intus com\", text: \"INTUS COM\" },\r\n    { key: \"RFID-Zutrittsleser\", text: \"RFID-Zutrittsleser\" },\r\n    { key: \"RFID-Technologie\", text: \"RFID-Technologie\" },\r\n    { key: \"Flex Air\", text: \"Flex Air\" },\r\n    { key: \"Flex OnCard \", text: \"Flex OnCard\" },\r\n    { key: \"PegaSys\", text: \"PegaSys\" },\r\n    { key: \"DEXICON\", text: \"DEXICON\" },\r\n    { key: \"DEXIOS\", text: \"DEXIOS\" },\r\n    { key: \"INTUS COM/TPI\", text: \"INTUS COM/TPI\" },\r\n    { key: \"TCL\", text: \"TCL\" },\r\n    { key: \"Palm Secure\", text: \"Palm Secure\" },\r\n    { key: \"Fingerprint\", text: \"Fingerprint\" },\r\n    { key: \"Kaufmännisches\", text: \"Kaufmännisches\" },\r\n    { key: \"Rechtliches\", text: \"Rechtliches\" },\r\n    { key: \"Geräte-Firmware\", text: \"Geräte-Firmware\" },\r\n    { key: \"Leser-Firmware\", text: \"Leser-Firmware\" },\r\n    { key: \"Sonstiges\", text: \"Sonstiges\" }\r\n];\r\n\r\nexport const EvaluationInputChat = ({ disabled, tabName }: Props) => {\r\n    const [showInfo, setShowInfo] = useState(false);\r\n\r\n    const { instance } = useMsal();\r\n    const disableRequiredAccessControl = requireAccessControl && !isLoggedIn(instance);\r\n\r\n    const [user, setUser] = useState<string>(\"\");\r\n\r\n    const onUserChange = (_ev: React.FormEvent<HTMLInputElement | HTMLTextAreaElement>, newValue?: string) => {\r\n        if (!newValue) {\r\n            setUser(\"\");\r\n        } else if (newValue.length <= 1000) {\r\n            setUser(newValue);\r\n        }\r\n    };\r\n\r\n    const [correct_answer, setCorrectAnswer] = useState<string>(\"\");\r\n\r\n    const onCorrectAnswerChange = (_ev: React.FormEvent<HTMLInputElement | HTMLTextAreaElement>, newValue?: string) => {\r\n        if (!newValue) {\r\n            setCorrectAnswer(\"\");\r\n        } else if (newValue.length <= 1000) {\r\n            setCorrectAnswer(newValue);\r\n        }\r\n    };\r\n\r\n    const [sonstiges, setSonstiges] = useState<string>(\"\");\r\n\r\n    const onSonstigesChange = (_ev: React.FormEvent<HTMLInputElement | HTMLTextAreaElement>, newValue?: string) => {\r\n        if (!newValue) {\r\n            setSonstiges(\"\");\r\n        } else if (newValue.length <= 1000) {\r\n            setSonstiges(newValue);\r\n        }\r\n    };\r\n\r\n    const [benefitMinuten, setBenefitMinuten] = useState<string>(\"\");\r\n\r\n    const onBenefitMinutenChange = (_ev: React.FormEvent<HTMLInputElement | HTMLTextAreaElement>, newValue?: string) => {\r\n        if (!newValue) {\r\n            setBenefitMinuten(\"\");\r\n        } else if (newValue.length <= 5000) {\r\n            setBenefitMinuten(newValue);\r\n        }\r\n    };\r\n\r\n    const [selectedBenefits, setSelectedBenefits] = useState<IDropdownOption[]>([]);\r\n\r\n    const onChangeSelectedBenefit = (\r\n        event: React.FormEvent<HTMLDivElement> | undefined,\r\n        item: IDropdownOption<any> | undefined,\r\n        index: number | undefined\r\n    ): void => {\r\n        if (!item) {\r\n            // Handle the case when item is undefined\r\n            console.log(\"Keine Auswahl!\");\r\n            return;\r\n        }\r\n        const updatedSelection = [...selectedBenefits];\r\n\r\n        if (item.selected) {\r\n            // Add the selected item to the array\r\n            updatedSelection.push(item);\r\n        } else {\r\n            // Remove the unselected item from the array\r\n            const indexToRemove = updatedSelection.findIndex(option => option.key === item.key);\r\n            if (indexToRemove !== -1) {\r\n                updatedSelection.splice(indexToRemove, 1);\r\n            }\r\n        }\r\n\r\n        setSelectedBenefits(updatedSelection);\r\n    };\r\n\r\n    const [selectedThemen, setSelectedThemen] = useState<IDropdownOption[]>([]);\r\n\r\n    const onChangeSelectedThemen = (\r\n        event: React.FormEvent<HTMLDivElement> | undefined,\r\n        item: IDropdownOption<any> | undefined,\r\n        index: number | undefined\r\n    ): void => {\r\n        if (!item) {\r\n            // Handle the case when item is undefined\r\n            console.log(\"Keine Auswahl!\");\r\n            return;\r\n        }\r\n        const updatedSelection = [...selectedThemen];\r\n\r\n        if (item.selected) {\r\n            // Add the selected item to the array\r\n            updatedSelection.push(item);\r\n        } else {\r\n            // Remove the unselected item from the array\r\n            const indexToRemove = updatedSelection.findIndex(option => option.key === item.key);\r\n            if (indexToRemove !== -1) {\r\n                updatedSelection.splice(indexToRemove, 1);\r\n            }\r\n        }\r\n\r\n        setSelectedThemen(updatedSelection);\r\n    };\r\n\r\n    const makeApiRequest = async () => {\r\n        const token = client ? await getToken(client) : undefined;\r\n        /*\r\n        const contextList = answer.choices[0].context.thoughts[1].description;\r\n        const context: string[] = [];\r\n        if (contextList.length > 0) {\r\n            for (const dict of contextList) {\r\n                if (\"sourcepage\" in dict) {\r\n                    context.push(dict[\"sourcepage\"]);\r\n                }\r\n            }\r\n        }\r\n        */\r\n        const currentDatetime: Date = new Date();\r\n        const benefitsListe = selectedBenefits.map(item => item.text);\r\n        const themenListe = selectedThemen.map(item => item.text);\r\n\r\n        const newline = {\r\n            TabName: tabName,\r\n            //Frage: answer.choices[0].context.thoughts[0].description,\r\n            //AntwortChatGPT: answer.choices[0].message.content,\r\n            //Kontext: context,\r\n            Korrektheit: selectedCorrectness?.text,\r\n            korrekte_Antwort: correct_answer,\r\n            Benefit: benefitsListe,\r\n            BenefitMinuten: benefitMinuten,\r\n            Thema: themenListe,\r\n            Sonstiges: sonstiges,\r\n            Benutzer: user,\r\n            Zeitstempel: currentDatetime,\r\n            model: \"gpt-4\"\r\n        };\r\n        const dataToAppend = JSON.stringify(newline) + \"\\n\";\r\n\r\n        try {\r\n            const result = await appendToBlobApi(dataToAppend, token);\r\n        } catch (e) {\r\n            console.log(e);\r\n        } finally {\r\n            setShowInfo(true);\r\n            setUser(\"\");\r\n            setSonstiges(\"\");\r\n            setCorrectAnswer(\"\");\r\n            setSelectedBenefits([]);\r\n            setSelectedCorrectness(undefined);\r\n            const closeTimeoutId = setTimeout(() => {\r\n                setShowInfo(false);\r\n            }, 6000);\r\n        }\r\n    };\r\n\r\n    const [selectedCorrectness, setSelectedCorrectness] = useState<IDropdownOption>();\r\n\r\n    return (\r\n        <div>\r\n            {showInfo && (\r\n                <div\r\n                    style={{\r\n                        position: \"fixed\",\r\n                        top: \"10px\",\r\n                        right: \"10px\",\r\n                        background: \"#9CBF2B\",\r\n                        padding: \"10px\",\r\n                        borderRadius: \"5px\",\r\n                        boxShadow: \"0 0 10px rgba(0, 0, 0, 0.2)\"\r\n                    }}\r\n                >\r\n                    <p>Gespeichert!</p>\r\n                </div>\r\n            )}\r\n            {\r\n                <Stack className={styles.evaluationContainer}>\r\n                    <Stack horizontal className={styles.evaluationInputContainer}>\r\n                        <Dropdown\r\n                            label=\"Ist die Antwort inhaltlich korrekt?\"\r\n                            selectedKey={selectedCorrectness ? selectedCorrectness.key : undefined}\r\n                            onChange={(e, opt, index) => {\r\n                                setSelectedCorrectness(opt);\r\n                            }}\r\n                            placeholder=\"Wähle eine Option\"\r\n                            options={dropdownCorrectnessOptions}\r\n                            styles={dropdownStyles}\r\n                        />\r\n                    </Stack>\r\n                    {(selectedCorrectness?.text === \"Nein\" || selectedCorrectness?.text === \"Teils\" || selectedCorrectness?.text === \"Nicht beurteilbar\") && (\r\n                        <div>\r\n                            <Stack horizontal className={styles.evaluationInputTextContainer}>\r\n                                <TextField\r\n                                    className={styles.evaluationInputTextContainer}\r\n                                    resizable={false}\r\n                                    placeholder={\"Was hat nicht gepasst?\"}\r\n                                    value={correct_answer}\r\n                                    onChange={onCorrectAnswerChange}\r\n                                />\r\n                            </Stack>\r\n                        </div>\r\n                    )}\r\n                    <Stack horizontal className={styles.evaluationInputContainer}>\r\n                        <Dropdown\r\n                            label=\"Auf welches Thema bezog sich der Chat?\"\r\n                            selectedKeys={selectedThemen?.map(option => option.key.toString())}\r\n                            onChange={onChangeSelectedThemen}\r\n                            placeholder=\"Wähle eine Option\"\r\n                            options={dropdownThemenOptions}\r\n                            styles={dropdownStyles}\r\n                            multiSelect\r\n                        />\r\n                    </Stack>\r\n                    <Stack horizontal className={styles.evaluationInputContainer}>\r\n                        <Dropdown\r\n                            label=\"Was hat dir die Antwort gebracht?\"\r\n                            selectedKeys={selectedBenefits?.map(option => option.key.toString())}\r\n                            onChange={onChangeSelectedBenefit}\r\n                            placeholder=\"Wähle eine Option\"\r\n                            options={dropdownBenefitsOptions}\r\n                            styles={dropdownStyles}\r\n                            multiSelect\r\n                        />\r\n                    </Stack>\r\n                    <Stack horizontal className={styles.evaluationInputTextContainer}>\r\n                        <TextField\r\n                            className={styles.evaluationInputTextContainer}\r\n                            resizable={false}\r\n                            placeholder={\"Wieviel Zeitersparnis (in Minuten) hat dir Athena gebracht?\"}\r\n                            value={benefitMinuten}\r\n                            onChange={onBenefitMinutenChange}\r\n                        />\r\n                    </Stack>\r\n                    <Stack horizontal className={styles.evaluationInputTextContainer}>\r\n                        <TextField\r\n                            className={styles.evaluationInputTextContainer}\r\n                            resizable={false}\r\n                            placeholder={\"Sonstiges: \"}\r\n                            value={sonstiges}\r\n                            onChange={onSonstigesChange}\r\n                        />\r\n                    </Stack>\r\n                    <Stack horizontal className={styles.evaluationInputTextContainer}>\r\n                        <TextField\r\n                            className={styles.evaluationInputTextContainer}\r\n                            resizable={false}\r\n                            placeholder={\"Bitte gib deinen Namen an: \"}\r\n                            value={user}\r\n                            onChange={onUserChange}\r\n                        />\r\n                    </Stack>\r\n                    <Stack horizontal className={styles.evaluationInputButtonsContainer}>\r\n                        <IconButton\r\n                            style={{ color: \"black\", marginLeft: \"10px\" }}\r\n                            iconProps={{ iconName: \"Save\" }}\r\n                            title=\"Speichern\"\r\n                            ariaLabel=\"Speichern\"\r\n                            onClick={() => makeApiRequest()}\r\n                        />\r\n                    </Stack>\r\n                </Stack>\r\n            }\r\n        </div>\r\n    );\r\n};\r\n","import { useRef, useState, useEffect } from \"react\";\r\nimport { Checkbox, Panel, DefaultButton, TextField, SpinButton } from \"@fluentui/react\";\r\nimport { SparkleFilled } from \"@fluentui/react-icons\";\r\nimport readNDJSONStream from \"ndjson-readablestream\";\r\n\r\nimport styles from \"./Chat.module.css\";\r\n\r\nimport {\r\n    chatApi,\r\n    configApi,\r\n    RetrievalMode,\r\n    ChatAppResponse,\r\n    ChatAppResponseOrError,\r\n    ChatAppRequest,\r\n    ResponseMessage,\r\n    VectorFieldOptions,\r\n    GPT4VInput\r\n} from \"../../api\";\r\nimport { Answer, AnswerError, AnswerLoading } from \"../../components/Answer\";\r\nimport { QuestionInput } from \"../../components/QuestionInput\";\r\nimport { ExampleList } from \"../../components/Example\";\r\nimport { UserChatMessage } from \"../../components/UserChatMessage\";\r\nimport { AnalysisPanel, AnalysisPanelTabs } from \"../../components/AnalysisPanel\";\r\nimport { SettingsButton } from \"../../components/SettingsButton\";\r\nimport { ClearChatButton } from \"../../components/ClearChatButton\";\r\nimport { useLogin, getToken, isLoggedIn, requireAccessControl } from \"../../authConfig\";\r\nimport { VectorSettings } from \"../../components/VectorSettings\";\r\nimport { useMsal } from \"@azure/msal-react\";\r\nimport { TokenClaimsDisplay } from \"../../components/TokenClaimsDisplay\";\r\nimport { GPT4VSettings } from \"../../components/GPT4VSettings\";\r\nimport { EvaluationInputChat } from \"../../components/EvaluationInputChat\";\r\n\r\nconst Chat = () => {\r\n    const [isConfigPanelOpen, setIsConfigPanelOpen] = useState(false);\r\n    const [promptTemplate, setPromptTemplate] = useState<string>(\"\");\r\n    const [retrieveCount, setRetrieveCount] = useState<number>(3);\r\n    const [retrievalMode, setRetrievalMode] = useState<RetrievalMode>(RetrievalMode.Hybrid);\r\n    const [useSemanticRanker, setUseSemanticRanker] = useState<boolean>(true);\r\n    const [shouldStream, setShouldStream] = useState<boolean>(true);\r\n    const [useSemanticCaptions, setUseSemanticCaptions] = useState<boolean>(false);\r\n    const [excludeCategory, setExcludeCategory] = useState<string>(\"\");\r\n    const [useSuggestFollowupQuestions, setUseSuggestFollowupQuestions] = useState<boolean>(true);\r\n    const [vectorFieldList, setVectorFieldList] = useState<VectorFieldOptions[]>([VectorFieldOptions.Embedding]);\r\n    const [useOidSecurityFilter, setUseOidSecurityFilter] = useState<boolean>(false);\r\n    const [useGroupsSecurityFilter, setUseGroupsSecurityFilter] = useState<boolean>(false);\r\n    const [gpt4vInput, setGPT4VInput] = useState<GPT4VInput>(GPT4VInput.TextAndImages);\r\n    const [useGPT4V, setUseGPT4V] = useState<boolean>(false);\r\n\r\n    const lastQuestionRef = useRef<string>(\"\");\r\n    const chatMessageStreamEnd = useRef<HTMLDivElement | null>(null);\r\n\r\n    const [isLoading, setIsLoading] = useState<boolean>(false);\r\n    const [isStreaming, setIsStreaming] = useState<boolean>(false);\r\n    const [error, setError] = useState<unknown>();\r\n\r\n    const [activeCitation, setActiveCitation] = useState<string>();\r\n    const [activeAnalysisPanelTab, setActiveAnalysisPanelTab] = useState<AnalysisPanelTabs | undefined>(undefined);\r\n\r\n    const [selectedAnswer, setSelectedAnswer] = useState<number>(0);\r\n    const [answers, setAnswers] = useState<[user: string, response: ChatAppResponse][]>([]);\r\n    const [streamedAnswers, setStreamedAnswers] = useState<[user: string, response: ChatAppResponse][]>([]);\r\n    const [showGPT4VOptions, setShowGPT4VOptions] = useState<boolean>(false);\r\n\r\n    const getConfig = async () => {\r\n        const token = client ? await getToken(client) : undefined;\r\n\r\n        configApi(token).then(config => {\r\n            setShowGPT4VOptions(config.showGPT4VOptions);\r\n        });\r\n    };\r\n\r\n    const handleAsyncRequest = async (question: string, answers: [string, ChatAppResponse][], setAnswers: Function, responseBody: ReadableStream<any>) => {\r\n        let answer: string = \"\";\r\n        let askResponse: ChatAppResponse = {} as ChatAppResponse;\r\n\r\n        const updateState = (newContent: string) => {\r\n            return new Promise(resolve => {\r\n                setTimeout(() => {\r\n                    answer += newContent;\r\n                    const latestResponse: ChatAppResponse = {\r\n                        ...askResponse,\r\n                        choices: [{ ...askResponse.choices[0], message: { content: answer, role: askResponse.choices[0].message.role } }]\r\n                    };\r\n                    setStreamedAnswers([...answers, [question, latestResponse]]);\r\n                    resolve(null);\r\n                }, 33);\r\n            });\r\n        };\r\n        try {\r\n            setIsStreaming(true);\r\n            for await (const event of readNDJSONStream(responseBody)) {\r\n                if (event[\"choices\"] && event[\"choices\"][0][\"context\"] && event[\"choices\"][0][\"context\"][\"data_points\"]) {\r\n                    event[\"choices\"][0][\"message\"] = event[\"choices\"][0][\"delta\"];\r\n                    askResponse = event;\r\n                } else if (event[\"choices\"] && event[\"choices\"][0][\"delta\"][\"content\"]) {\r\n                    setIsLoading(false);\r\n                    await updateState(event[\"choices\"][0][\"delta\"][\"content\"]);\r\n                } else if (event[\"choices\"] && event[\"choices\"][0][\"context\"]) {\r\n                    // Update context with new keys from latest event\r\n                    askResponse.choices[0].context = { ...askResponse.choices[0].context, ...event[\"choices\"][0][\"context\"] };\r\n                } else if (event[\"error\"]) {\r\n                    throw Error(event[\"error\"]);\r\n                }\r\n            }\r\n        } finally {\r\n            setIsStreaming(false);\r\n        }\r\n        const fullResponse: ChatAppResponse = {\r\n            ...askResponse,\r\n            choices: [{ ...askResponse.choices[0], message: { content: answer, role: askResponse.choices[0].message.role } }]\r\n        };\r\n        return fullResponse;\r\n    };\r\n\r\n    const client = useLogin ? useMsal().instance : undefined;\r\n\r\n    const makeApiRequest = async (question: string) => {\r\n        lastQuestionRef.current = question;\r\n\r\n        error && setError(undefined);\r\n        setIsLoading(true);\r\n        setActiveCitation(undefined);\r\n        setActiveAnalysisPanelTab(undefined);\r\n\r\n        const token = client ? await getToken(client) : undefined;\r\n\r\n        try {\r\n            const messages: ResponseMessage[] = answers.flatMap(a => [\r\n                { content: a[0], role: \"user\" },\r\n                { content: a[1].choices[0].message.content, role: \"assistant\" }\r\n            ]);\r\n\r\n            const request: ChatAppRequest = {\r\n                messages: [...messages, { content: question, role: \"user\" }],\r\n                stream: shouldStream,\r\n                context: {\r\n                    overrides: {\r\n                        prompt_template: promptTemplate.length === 0 ? undefined : promptTemplate,\r\n                        exclude_category: excludeCategory.length === 0 ? undefined : excludeCategory,\r\n                        top: retrieveCount,\r\n                        retrieval_mode: retrievalMode,\r\n                        semantic_ranker: useSemanticRanker,\r\n                        semantic_captions: useSemanticCaptions,\r\n                        suggest_followup_questions: useSuggestFollowupQuestions,\r\n                        use_oid_security_filter: useOidSecurityFilter,\r\n                        use_groups_security_filter: useGroupsSecurityFilter,\r\n                        vector_fields: vectorFieldList,\r\n                        use_gpt4v: useGPT4V,\r\n                        gpt4v_input: gpt4vInput\r\n                    }\r\n                },\r\n                // ChatAppProtocol: Client must pass on any session state received from the server\r\n                session_state: answers.length ? answers[answers.length - 1][1].choices[0].session_state : null\r\n            };\r\n\r\n            const response = await chatApi(request, token);\r\n            if (!response.body) {\r\n                throw Error(\"No response body\");\r\n            }\r\n            if (shouldStream) {\r\n                const parsedResponse: ChatAppResponse = await handleAsyncRequest(question, answers, setAnswers, response.body);\r\n                setAnswers([...answers, [question, parsedResponse]]);\r\n            } else {\r\n                const parsedResponse: ChatAppResponseOrError = await response.json();\r\n                if (response.status > 299 || !response.ok) {\r\n                    throw Error(parsedResponse.error || \"Unknown error\");\r\n                }\r\n                setAnswers([...answers, [question, parsedResponse as ChatAppResponse]]);\r\n            }\r\n        } catch (e) {\r\n            setError(e);\r\n        } finally {\r\n            setIsLoading(false);\r\n        }\r\n    };\r\n\r\n    const clearChat = () => {\r\n        lastQuestionRef.current = \"\";\r\n        error && setError(undefined);\r\n        setActiveCitation(undefined);\r\n        setActiveAnalysisPanelTab(undefined);\r\n        setAnswers([]);\r\n        setStreamedAnswers([]);\r\n        setIsLoading(false);\r\n        setIsStreaming(false);\r\n    };\r\n\r\n    useEffect(() => chatMessageStreamEnd.current?.scrollIntoView({ behavior: \"smooth\" }), [isLoading]);\r\n    useEffect(() => chatMessageStreamEnd.current?.scrollIntoView({ behavior: \"auto\" }), [streamedAnswers]);\r\n    useEffect(() => {\r\n        getConfig();\r\n    }, []);\r\n\r\n    const onPromptTemplateChange = (_ev?: React.FormEvent<HTMLInputElement | HTMLTextAreaElement>, newValue?: string) => {\r\n        setPromptTemplate(newValue || \"\");\r\n    };\r\n\r\n    const onRetrieveCountChange = (_ev?: React.SyntheticEvent<HTMLElement, Event>, newValue?: string) => {\r\n        setRetrieveCount(parseInt(newValue || \"3\"));\r\n    };\r\n\r\n    const onUseSemanticRankerChange = (_ev?: React.FormEvent<HTMLElement | HTMLInputElement>, checked?: boolean) => {\r\n        setUseSemanticRanker(!!checked);\r\n    };\r\n\r\n    const onUseSemanticCaptionsChange = (_ev?: React.FormEvent<HTMLElement | HTMLInputElement>, checked?: boolean) => {\r\n        setUseSemanticCaptions(!!checked);\r\n    };\r\n\r\n    const onShouldStreamChange = (_ev?: React.FormEvent<HTMLElement | HTMLInputElement>, checked?: boolean) => {\r\n        setShouldStream(!!checked);\r\n    };\r\n\r\n    const onExcludeCategoryChanged = (_ev?: React.FormEvent, newValue?: string) => {\r\n        setExcludeCategory(newValue || \"\");\r\n    };\r\n\r\n    const onUseSuggestFollowupQuestionsChange = (_ev?: React.FormEvent<HTMLElement | HTMLInputElement>, checked?: boolean) => {\r\n        setUseSuggestFollowupQuestions(!!checked);\r\n    };\r\n\r\n    const onUseOidSecurityFilterChange = (_ev?: React.FormEvent<HTMLElement | HTMLInputElement>, checked?: boolean) => {\r\n        setUseOidSecurityFilter(!!checked);\r\n    };\r\n\r\n    const onUseGroupsSecurityFilterChange = (_ev?: React.FormEvent<HTMLElement | HTMLInputElement>, checked?: boolean) => {\r\n        setUseGroupsSecurityFilter(!!checked);\r\n    };\r\n\r\n    const onExampleClicked = (example: string) => {\r\n        makeApiRequest(example);\r\n    };\r\n\r\n    const onShowCitation = (citation: string, index: number) => {\r\n        if (activeCitation === citation && activeAnalysisPanelTab === AnalysisPanelTabs.CitationTab && selectedAnswer === index) {\r\n            setActiveAnalysisPanelTab(undefined);\r\n        } else {\r\n            setActiveCitation(citation);\r\n            setActiveAnalysisPanelTab(AnalysisPanelTabs.CitationTab);\r\n        }\r\n\r\n        setSelectedAnswer(index);\r\n    };\r\n\r\n    const onToggleTab = (tab: AnalysisPanelTabs, index: number) => {\r\n        if (activeAnalysisPanelTab === tab && selectedAnswer === index) {\r\n            setActiveAnalysisPanelTab(undefined);\r\n        } else {\r\n            setActiveAnalysisPanelTab(tab);\r\n        }\r\n\r\n        setSelectedAnswer(index);\r\n    };\r\n\r\n    return (\r\n        <div className={styles.container}>\r\n            <div className={styles.commandsContainer}>\r\n                <ClearChatButton className={styles.commandButton} onClick={clearChat} disabled={!lastQuestionRef.current || isLoading} />\r\n                <SettingsButton className={styles.commandButton} onClick={() => setIsConfigPanelOpen(!isConfigPanelOpen)} />\r\n            </div>\r\n            <div className={styles.chatRoot}>\r\n                <div className={styles.chatContainer}>\r\n                    <h2>Athena KI-Testphase: Feedback zur Qualität im Teamskanal erwünscht!</h2>\r\n                    <h3>Wenn du einen Produktnamen in deiner Frage verwenden willst, gib diesen in \"\" an. Zum Beispiel \"INTUS ACM40e\".</h3>\r\n                    {!lastQuestionRef.current ? (\r\n                        <div className={styles.chatEmptyState}>\r\n                            <SparkleFilled fontSize={\"120px\"} primaryFill={\"#9CBF2B\"} aria-hidden=\"true\" aria-label=\"Chat logo\" />\r\n                            <h1 className={styles.chatEmptyStateTitle}>Chatte mit der PCS Wissensdatenbank</h1>\r\n                            <h2 className={styles.chatEmptyStateSubtitle}>Stelle eine Frage zu den PCS Geräten oder probiere eins der Beispiele</h2>\r\n                            <ExampleList onExampleClicked={onExampleClicked} useGPT4V={useGPT4V} tabName={\"chatgpt\"} />\r\n                        </div>\r\n                    ) : (\r\n                        <div className={styles.chatMessageStream}>\r\n                            {isStreaming &&\r\n                                streamedAnswers.map((streamedAnswer, index) => (\r\n                                    <div key={index}>\r\n                                        <UserChatMessage message={streamedAnswer[0]} />\r\n                                        <div className={styles.chatMessageGpt}>\r\n                                            <Answer\r\n                                                isStreaming={true}\r\n                                                key={index}\r\n                                                answer={streamedAnswer[1]}\r\n                                                isSelected={false}\r\n                                                onCitationClicked={c => onShowCitation(c, index)}\r\n                                                onThoughtProcessClicked={() => onToggleTab(AnalysisPanelTabs.ThoughtProcessTab, index)}\r\n                                                // onSupportingContentClicked={() => onToggleTab(AnalysisPanelTabs.SupportingContentTab, index)}\r\n                                                onFollowupQuestionClicked={q => makeApiRequest(q)}\r\n                                                showFollowupQuestions={useSuggestFollowupQuestions && answers.length - 1 === index}\r\n                                            />\r\n                                        </div>\r\n                                    </div>\r\n                                ))}\r\n                            {!isStreaming &&\r\n                                answers.map((answer, index) => (\r\n                                    <div key={index}>\r\n                                        <UserChatMessage message={answer[0]} />\r\n                                        <div className={styles.chatMessageGpt}>\r\n                                            <Answer\r\n                                                isStreaming={false}\r\n                                                key={index}\r\n                                                answer={answer[1]}\r\n                                                isSelected={selectedAnswer === index && activeAnalysisPanelTab !== undefined}\r\n                                                onCitationClicked={c => onShowCitation(c, index)}\r\n                                                onThoughtProcessClicked={() => onToggleTab(AnalysisPanelTabs.ThoughtProcessTab, index)}\r\n                                                // onSupportingContentClicked={() => onToggleTab(AnalysisPanelTabs.SupportingContentTab, index)}\r\n                                                onFollowupQuestionClicked={q => makeApiRequest(q)}\r\n                                                showFollowupQuestions={useSuggestFollowupQuestions && answers.length - 1 === index}\r\n                                            />\r\n                                        </div>\r\n                                    </div>\r\n                                ))}\r\n                            {isLoading && (\r\n                                <>\r\n                                    <UserChatMessage message={lastQuestionRef.current} />\r\n                                    <div className={styles.chatMessageGptMinWidth}>\r\n                                        <AnswerLoading />\r\n                                    </div>\r\n                                </>\r\n                            )}\r\n                            {error ? (\r\n                                <>\r\n                                    <UserChatMessage message={lastQuestionRef.current} />\r\n                                    <div className={styles.chatMessageGptMinWidth}>\r\n                                        <AnswerError error={error.toString()} onRetry={() => makeApiRequest(lastQuestionRef.current)} />\r\n                                    </div>\r\n                                </>\r\n                            ) : null}\r\n                            <div ref={chatMessageStreamEnd} />\r\n                        </div>\r\n                    )}\r\n\r\n                    <div className={styles.chatInput}>\r\n                        <QuestionInput\r\n                            clearOnSend\r\n                            placeholder=\"Gib eine neue Frage ein...\"\r\n                            disabled={isLoading}\r\n                            onSend={question => makeApiRequest(question)}\r\n                        />\r\n                    </div>\r\n                </div>\r\n\r\n                {answers.length > 0 && activeAnalysisPanelTab && (\r\n                    <AnalysisPanel\r\n                        className={styles.chatAnalysisPanel}\r\n                        activeCitation={activeCitation}\r\n                        onActiveTabChanged={x => onToggleTab(x, selectedAnswer)}\r\n                        citationHeight=\"810px\"\r\n                        answer={answers[selectedAnswer][1]}\r\n                        activeTab={activeAnalysisPanelTab}\r\n                    />\r\n                )}\r\n\r\n                <Panel\r\n                    headerText=\"Konfigurieren Sie die Erstellung von Antworten\"\r\n                    isOpen={isConfigPanelOpen}\r\n                    isBlocking={false}\r\n                    onDismiss={() => setIsConfigPanelOpen(false)}\r\n                    closeButtonAriaLabel=\"Schließen\"\r\n                    onRenderFooterContent={() => <DefaultButton onClick={() => setIsConfigPanelOpen(false)}>Close</DefaultButton>}\r\n                    isFooterAtBottom={true}\r\n                >\r\n                    <TextField\r\n                        className={styles.chatSettingsSeparator}\r\n                        defaultValue={promptTemplate}\r\n                        label=\"Prompt Vorlage überschreiben\"\r\n                        multiline\r\n                        autoAdjustHeight\r\n                        onChange={onPromptTemplateChange}\r\n                    />\r\n\r\n                    {useLogin && (\r\n                        <Checkbox\r\n                            className={styles.chatSettingsSeparator}\r\n                            checked={useOidSecurityFilter || requireAccessControl}\r\n                            label=\"Oid-Sicherheitsfilter verwenden\"\r\n                            disabled={!isLoggedIn(client) || requireAccessControl}\r\n                            onChange={onUseOidSecurityFilterChange}\r\n                        />\r\n                    )}\r\n                    {useLogin && (\r\n                        <Checkbox\r\n                            className={styles.chatSettingsSeparator}\r\n                            checked={useGroupsSecurityFilter || requireAccessControl}\r\n                            label=\"Gruppen Sicherheitsfilter verwendenr\"\r\n                            disabled={!isLoggedIn(client) || requireAccessControl}\r\n                            onChange={onUseGroupsSecurityFilterChange}\r\n                        />\r\n                    )}\r\n                    {useLogin && <TokenClaimsDisplay />}\r\n                </Panel>\r\n            </div>\r\n            {lastQuestionRef.current ? (\r\n                <div className={styles.emailBottomSection}>\r\n                    <div className={styles.emailQuestionInput}>{!isLoading && !error && <EvaluationInputChat disabled={isLoading} tabName={\"chat\"} />}</div>\r\n                </div>\r\n            ) : (\r\n                <div></div>\r\n            )}\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Chat;\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom/client\";\r\nimport { createHashRouter, RouterProvider } from \"react-router-dom\";\r\nimport { initializeIcons } from \"@fluentui/react\";\r\nimport { MsalProvider } from \"@azure/msal-react\";\r\nimport { PublicClientApplication, EventType, AccountInfo } from \"@azure/msal-browser\";\r\nimport { msalConfig, useLogin } from \"./authConfig\";\r\n\r\nimport \"./index.css\";\r\n\r\nimport Layout from \"./pages/layout/Layout\";\r\nimport Chat from \"./pages/chat/Chat\";\r\n\r\nvar layout;\r\nif (useLogin) {\r\n    var msalInstance = new PublicClientApplication(msalConfig);\r\n\r\n    // Default to using the first account if no account is active on page load\r\n    if (!msalInstance.getActiveAccount() && msalInstance.getAllAccounts().length > 0) {\r\n        // Account selection logic is app dependent. Adjust as needed for different use cases.\r\n        msalInstance.setActiveAccount(msalInstance.getActiveAccount());\r\n    }\r\n\r\n    // Listen for sign-in event and set active account\r\n    msalInstance.addEventCallback(event => {\r\n        if (event.eventType === EventType.LOGIN_SUCCESS && event.payload) {\r\n            const account = event.payload as AccountInfo;\r\n            msalInstance.setActiveAccount(account);\r\n        }\r\n    });\r\n\r\n    layout = (\r\n        <MsalProvider instance={msalInstance}>\r\n            <Layout />\r\n        </MsalProvider>\r\n    );\r\n} else {\r\n    layout = <Layout />;\r\n}\r\n\r\ninitializeIcons();\r\n\r\nconst router = createHashRouter([\r\n    {\r\n        path: \"/\",\r\n        element: layout,\r\n        children: [\r\n            {\r\n                index: true,\r\n                element: <Chat />\r\n            },\r\n            {\r\n                path: \"qa\",\r\n                lazy: () => import(\"./pages/qa/QA\")\r\n            },\r\n            {\r\n                path: \"qadetail\",\r\n                lazy: () => import(\"./pages/qadetail/QADetail\")\r\n            },\r\n            {\r\n                path: \"marketing\",\r\n                lazy: () => import(\"./pages/marketing/Marketing\")\r\n            },\r\n            {\r\n                path: \"chatgpt\",\r\n                lazy: () => import(\"./pages/chatgpt/Chatgpt\")\r\n            },\r\n            {\r\n                path: \"info\",\r\n                lazy: () => import(\"./pages/info/Info\")\r\n            },\r\n            {\r\n                path: \"*\",\r\n                lazy: () => import(\"./pages/NoPage\")\r\n            }\r\n        ]\r\n    }\r\n]);\r\n\r\nReactDOM.createRoot(document.getElementById(\"root\") as HTMLElement).render(\r\n    <React.StrictMode>\r\n        <RouterProvider router={router} />\r\n    </React.StrictMode>\r\n);\r\n"],"file":"assets/index-24276f89.js"}